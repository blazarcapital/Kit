Compilation {
  _pluginCompat:
   SyncBailHook {
     _args: [ 'options', [length]: 1 ],
     taps:
      [ { type: 'sync',
          fn: { [Function] [length]: 1, [name]: '' },
          name: 'Compilation' },
        { type: 'sync',
          fn: { [Function] [length]: 1, [name]: '' },
          name: 'Tapable camelCase',
          stage: 100 },
        { type: 'sync',
          fn: { [Function] [length]: 1, [name]: '' },
          name: 'Tapable this.hooks',
          stage: 200 },
        [length]: 3 ],
     interceptors: [ [length]: 0 ],
     call:
      { [Function: lazyCompileHook]
        [length]: 0,
        [name]: 'lazyCompileHook',
        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
     promise:
      { [Function: lazyCompileHook]
        [length]: 0,
        [name]: 'lazyCompileHook',
        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
     callAsync:
      { [Function: lazyCompileHook]
        [length]: 0,
        [name]: 'lazyCompileHook',
        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
     _x: undefined },
  hooks:
   { buildModule:
      SyncHook {
        _args: [ 'module', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     rebuildModule:
      SyncHook {
        _args: [ 'module', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'FlagDependencyExportsPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     failedModule:
      SyncHook {
        _args: [ 'module', 'error', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     succeedModule:
      SyncHook {
        _args: [ 'module', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     addEntry:
      SyncHook {
        _args: [ 'entry', 'name', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     failedEntry:
      SyncHook {
        _args: [ 'entry', 'name', 'error', [length]: 3 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     succeedEntry:
      SyncHook {
        _args: [ 'entry', 'name', 'module', [length]: 3 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     dependencyReference:
      SyncWaterfallHook {
        _args:
         [ 'dependencyReference', 'dependency', 'module', [length]: 3 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     finishModules:
      AsyncSeriesHook {
        _args: [ 'modules', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'FlagDependencyExportsPlugin' },
           { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'WasmFinalizeExportsPlugin' },
           [length]: 2 ],
        interceptors: [ [length]: 0 ],
        call: undefined,
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     finishRebuildingModule:
      SyncHook {
        _args: [ 'module', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'FlagDependencyExportsPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     unseal:
      SyncHook {
        _args: [ [length]: 0 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 0, [name]: '' },
             name: 'SplitChunksPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     seal:
      SyncHook {
        _args: [ [length]: 0 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 0, [name]: '' },
             name: 'WarnCaseSensitiveModulesPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     beforeChunks:
      SyncHook {
        _args: [ [length]: 0 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterChunks:
      SyncHook {
        _args: [ 'chunks', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 0, [name]: '' },
             name: 'WebAssemblyModulesPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeDependenciesBasic:
      SyncBailHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeDependencies:
      SyncBailHook {
        _args: [ 'modules', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'SideEffectsFlagPlugin' },
           { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'FlagDependencyUsagePlugin' },
           [length]: 2 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeDependenciesAdvanced:
      SyncBailHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterOptimizeDependencies:
      SyncHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimize:
      SyncHook {
        _args: [ [length]: 0 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeModulesBasic:
      SyncBailHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeModules:
      SyncBailHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeModulesAdvanced:
      SyncBailHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterOptimizeModules:
      SyncHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeChunksBasic:
      SyncBailHook {
        _args: [ 'chunks', 'chunkGroups', [length]: 2 ],
        taps:
         [ { type: 'sync',
             fn: { [Function: handler] [length]: 1, [name]: 'handler' },
             name: 'EnsureChunkConditionsPlugin' },
           { type: 'sync',
             fn: { [Function: handler] [length]: 2, [name]: 'handler' },
             name: 'RemoveParentModulesPlugin' },
           { type: 'sync',
             fn: { [Function: handler] [length]: 1, [name]: 'handler' },
             name: 'RemoveEmptyChunksPlugin' },
           { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'MergeDuplicateChunksPlugin' },
           [length]: 4 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeChunks:
      SyncBailHook {
        _args: [ 'chunks', 'chunkGroups', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeChunksAdvanced:
      SyncBailHook {
        _args: [ 'chunks', 'chunkGroups', [length]: 2 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'SplitChunksPlugin' },
           { type: 'sync',
             fn: { [Function: handler] [length]: 1, [name]: 'handler' },
             name: 'RemoveEmptyChunksPlugin' },
           [length]: 2 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterOptimizeChunks:
      SyncHook {
        _args: [ 'chunks', 'chunkGroups', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeTree:
      AsyncSeriesHook {
        _args: [ 'chunks', 'modules', [length]: 2 ],
        taps:
         [ { type: 'async',
             fn: { [Function] [length]: 3, [name]: '' },
             name: 'ExtractTextPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call: undefined,
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterOptimizeTree:
      SyncHook {
        _args: [ 'chunks', 'modules', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeChunkModulesBasic:
      SyncBailHook {
        _args: [ 'chunks', 'modules', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeChunkModules:
      SyncBailHook {
        _args: [ 'chunks', 'modules', [length]: 2 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 2, [name]: '' },
             name: 'ModuleConcatenationPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeChunkModulesAdvanced:
      SyncBailHook {
        _args: [ 'chunks', 'modules', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterOptimizeChunkModules:
      SyncHook {
        _args: [ 'chunks', 'modules', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     shouldRecord:
      SyncBailHook {
        _args: [ [length]: 0 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 0, [name]: '' },
             name: 'NoEmitOnErrorsPlugin' },
           { type: 'sync',
             fn: { [Function] [length]: 0, [name]: '' },
             name: 'NoEmitOnErrorsPlugin' },
           [length]: 2 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     reviveModules:
      SyncHook {
        _args: [ 'modules', 'records', [length]: 2 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 2, [name]: '' },
             name: 'RecordIdsPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeModuleOrder:
      SyncHook {
        _args: [ 'modules', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'OccurrenceOrderModuleIdsPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     advancedOptimizeModuleOrder:
      SyncHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     beforeModuleIds:
      SyncHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     moduleIds:
      SyncHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeModuleIds:
      SyncHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterOptimizeModuleIds:
      SyncHook {
        _args: [ 'modules', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     reviveChunks:
      SyncHook {
        _args: [ 'chunks', 'records', [length]: 2 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 2, [name]: '' },
             name: 'RecordIdsPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeChunkOrder:
      SyncHook {
        _args: [ 'chunks', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'OccurrenceOrderChunkIdsPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     beforeChunkIds:
      SyncHook {
        _args: [ 'chunks', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeChunkIds:
      SyncHook {
        _args: [ 'chunks', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'FlagIncludedChunksPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterOptimizeChunkIds:
      SyncHook {
        _args: [ 'chunks', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     recordModules:
      SyncHook {
        _args: [ 'modules', 'records', [length]: 2 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 2, [name]: '' },
             name: 'RecordIdsPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     recordChunks:
      SyncHook {
        _args: [ 'chunks', 'records', [length]: 2 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 2, [name]: '' },
             name: 'RecordIdsPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     beforeHash:
      SyncHook {
        _args: [ [length]: 0 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     contentHash:
      SyncHook {
        _args: [ 'chunk', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'JavascriptModulesPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterHash:
      SyncHook {
        _args: [ [length]: 0 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     recordHash:
      SyncHook {
        _args: [ 'records', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     record:
      SyncHook {
        _args: [ 'compilation', 'records', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     beforeModuleAssets:
      SyncHook {
        _args: [ [length]: 0 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     shouldGenerateChunkAssets:
      SyncBailHook {
        _args: [ [length]: 0 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     beforeChunkAssets:
      SyncHook {
        _args: [ [length]: 0 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     additionalChunkAssets:
      SyncHook {
        _args: [ 'chunks', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     additionalAssets:
      AsyncSeriesHook {
        _args: [ [length]: 0 ],
        taps:
         [ { type: 'async',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'ExtractTextPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call: undefined,
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeChunkAssets:
      AsyncSeriesHook {
        _args: [ 'chunks', [length]: 1 ],
        taps:
         [ { type: 'async',
             fn:
              { [Function: bound optimizeFn] [length]: 2, [name]: 'bound optimizeFn' },
             name: 'TerserPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call: undefined,
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterOptimizeChunkAssets:
      SyncHook {
        _args: [ 'chunks', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeAssets:
      AsyncSeriesHook {
        _args: [ 'assets', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call: undefined,
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterOptimizeAssets:
      SyncHook {
        _args: [ 'assets', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     needAdditionalSeal:
      SyncBailHook {
        _args: [ [length]: 0 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterSeal:
      AsyncSeriesHook {
        _args: [ [length]: 0 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call: undefined,
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     chunkHash:
      SyncHook {
        _args: [ 'chunk', 'chunkHash', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     moduleAsset:
      SyncHook {
        _args: [ 'module', 'filename', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     chunkAsset:
      SyncHook {
        _args: [ 'chunk', 'filename', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     assetPath:
      SyncWaterfallHook {
        _args: [ 'filename', 'data', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     needAdditionalPass:
      SyncBailHook {
        _args: [ [length]: 0 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     childCompiler:
      SyncHook {
        _args:
         [ 'childCompiler', 'compilerName', 'compilerIndex', [length]: 3 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     log:
      SyncBailHook {
        _args: [ 'origin', 'logEntry', [length]: 2 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     normalModuleLoader:
      SyncHook {
        _args: [ 'loaderContext', 'module', [length]: 2 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 2, [name]: '' },
             name: 'ExtractTextPlugin' },
           { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'LoaderTargetPlugin' },
           { type: 'sync',
             fn: { [Function] [length]: 2, [name]: '' },
             name: 'LoaderPlugin' },
           [length]: 3 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeExtractedChunksBasic:
      SyncBailHook {
        _args: [ 'chunks', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function: handler] [length]: 1, [name]: 'handler' },
             name: 'EnsureChunkConditionsPlugin' },
           { type: 'sync',
             fn: { [Function: handler] [length]: 2, [name]: 'handler' },
             name: 'RemoveParentModulesPlugin' },
           { type: 'sync',
             fn: { [Function: handler] [length]: 1, [name]: 'handler' },
             name: 'RemoveEmptyChunksPlugin' },
           [length]: 3 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeExtractedChunks:
      SyncBailHook {
        _args: [ 'chunks', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     optimizeExtractedChunksAdvanced:
      SyncBailHook {
        _args: [ 'chunks', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function: handler] [length]: 1, [name]: 'handler' },
             name: 'RemoveEmptyChunksPlugin' },
           [length]: 1 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     afterOptimizeExtractedChunks:
      SyncHook {
        _args: [ 'chunks', [length]: 1 ],
        taps: [ [length]: 0 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined } },
  name: undefined,
  compiler:
   Compiler {
     _pluginCompat:
      SyncBailHook {
        _args: [ 'options', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'Compiler' },
           { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'Tapable camelCase',
             stage: 100 },
           { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'Tapable this.hooks',
             stage: 200 },
           [length]: 3 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: anonymous]
           [length]: 1,
           [name]: 'anonymous',
           [prototype]: anonymous { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x:
         [ { [Function] [length]: 1, [name]: '' },
           { [Function] [length]: 1, [name]: '' },
           { [Function] [length]: 1, [name]: '' },
           [length]: 3 ] },
     hooks:
      { shouldEmit:
         SyncBailHook {
           _args: [ 'compilation', [length]: 1 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'NoEmitOnErrorsPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'NoEmitOnErrorsPlugin' },
              [length]: 2 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        done:
         AsyncSeriesHook {
           _args: [ 'stats', [length]: 1 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call: undefined,
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        additionalPass:
         AsyncSeriesHook {
           _args: [ [length]: 0 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call: undefined,
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        beforeRun:
         AsyncSeriesHook {
           _args: [ 'compiler', [length]: 1 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'NodeEnvironmentPlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call: undefined,
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: anonymous]
              [length]: 2,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           _x: [ { [Function] [length]: 1, [name]: '' }, [length]: 1 ] },
        run:
         AsyncSeriesHook {
           _args: [ 'compiler', [length]: 1 ],
           taps:
            [ { type: 'async',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'StylelintWebpackPlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call: undefined,
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: anonymous]
              [length]: 2,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           _x: [ { [Function] [length]: 2, [name]: '' }, [length]: 1 ] },
        emit:
         AsyncSeriesHook {
           _args: [ 'compilation', [length]: 1 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call: undefined,
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        assetEmitted:
         AsyncSeriesHook {
           _args: [ 'file', 'content', [length]: 2 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call: undefined,
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        afterEmit:
         AsyncSeriesHook {
           _args: [ 'compilation', [length]: 1 ],
           taps:
            [ { type: 'async',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'unnamed compat plugin',
                stage: 0 },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'SizeLimitsPlugin' },
              { type: 'async',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'StylelintWebpackPlugin' },
              [length]: 3 ],
           interceptors: [ [length]: 0 ],
           call: undefined,
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        thisCompilation:
         SyncHook {
           _args: [ 'compilation', 'params', [length]: 2 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'ExtractTextPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'JsonpTemplatePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'FetchCompileWasmTemplatePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'SplitChunksPlugin' },
              [length]: 4 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: anonymous]
              [length]: 2,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x:
            [ { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              [length]: 4 ] },
        compilation:
         SyncHook {
           _args: [ 'compilation', 'params', [length]: 2 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'NoEmitOnErrorsPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'DefinePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'FunctionModulePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'NodeSourcePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'LoaderTargetPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'JavascriptModulesPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'JsonModulesPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'WebAssemblyModulesPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'MultiEntryPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'CompatibilityPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'HarmonyModulesPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'AMDPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'RequireJsStuffPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'CommonJsPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'LoaderPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'LoaderPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'NodeStuffPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'CommonJsStuffPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'APIPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'ConstPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'UseStrictPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'RequireIncludePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'RequireEnsurePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'RequireContextPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'ImportPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'SystemPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'EnsureChunkConditionsPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'RemoveParentModulesPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'RemoveEmptyChunksPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'MergeDuplicateChunksPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'FlagIncludedChunksPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'SideEffectsFlagPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'FlagDependencyExportsPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'FlagDependencyUsagePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'ModuleConcatenationPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'NoEmitOnErrorsPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'WasmFinalizeExportsPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'OccurrenceOrderModuleIdsPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'OccurrenceOrderChunkIdsPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'DefinePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'TerserPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'TemplatedPathPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'RecordIdsPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'WarnCaseSensitiveModulesPlugin' },
              [length]: 44 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: anonymous]
              [length]: 2,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x:
            [ { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 1, [name]: '' },
              [length]: 44 ] },
        normalModuleFactory:
         SyncHook {
           _args: [ 'normalModuleFactory', [length]: 1 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'SideEffectsFlagPlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: anonymous]
              [length]: 1,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: [ { [Function] [length]: 1, [name]: '' }, [length]: 1 ] },
        contextModuleFactory:
         SyncHook {
           _args: [ 'contextModulefactory', [length]: 1 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: anonymous]
              [length]: 1,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: [ [length]: 0 ] },
        beforeCompile:
         AsyncSeriesHook {
           _args: [ 'params', [length]: 1 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call: undefined,
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: anonymous]
              [length]: 2,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           _x: [ [length]: 0 ] },
        compile:
         SyncHook {
           _args: [ 'params', [length]: 1 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'ExternalsPlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: anonymous]
              [length]: 1,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: [ { [Function] [length]: 1, [name]: '' }, [length]: 1 ] },
        make:
         AsyncParallelHook {
           _args: [ 'compilation', [length]: 1 ],
           taps:
            [ { type: 'async',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'ShopifyCriticalCSSPlugin' },
              { type: 'async',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'MultiEntryPlugin' },
              [length]: 2 ],
           interceptors: [ [length]: 0 ],
           call: undefined,
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: anonymous]
              [length]: 2,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           _x:
            [ { [Function] [length]: 2, [name]: '' },
              { [Function] [length]: 2, [name]: '' },
              [length]: 2 ] },
        afterCompile:
         AsyncSeriesHook {
           _args: [ 'compilation', [length]: 1 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call: undefined,
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        watchRun:
         AsyncSeriesHook {
           _args: [ 'compiler', [length]: 1 ],
           taps:
            [ { type: 'async',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'StylelintWebpackPlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call: undefined,
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        failed:
         SyncHook {
           _args: [ 'error', [length]: 1 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        invalid:
         SyncHook {
           _args: [ 'filename', 'changeTime', [length]: 2 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        watchClose:
         SyncHook {
           _args: [ [length]: 0 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        infrastructureLog:
         SyncBailHook {
           _args: [ 'origin', 'type', 'args', [length]: 3 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        environment:
         SyncHook {
           _args: [ [length]: 0 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: anonymous]
              [length]: 0,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: [ [length]: 0 ] },
        afterEnvironment:
         SyncHook {
           _args: [ [length]: 0 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: anonymous]
              [length]: 0,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: [ [length]: 0 ] },
        afterPlugins:
         SyncHook {
           _args: [ 'compiler', [length]: 1 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: anonymous]
              [length]: 1,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: [ [length]: 0 ] },
        afterResolvers:
         SyncHook {
           _args: [ 'compiler', [length]: 1 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'NodeSourcePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 0, [name]: '' },
                name: 'AMDPlugin' },
              [length]: 2 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: anonymous]
              [length]: 1,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x:
            [ { [Function] [length]: 1, [name]: '' },
              { [Function] [length]: 0, [name]: '' },
              [length]: 2 ] },
        entryOption:
         SyncBailHook {
           _args: [ 'context', 'entry', [length]: 2 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'EntryOptionPlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: anonymous]
              [length]: 2,
              [name]: 'anonymous',
              [prototype]: anonymous { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: [ { [Function] [length]: 2, [name]: '' }, [length]: 1 ] },
        infrastructurelog:
         SyncBailHook {
           _args: [ 'origin', 'type', 'args', [length]: 3 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined } },
     name: undefined,
     parentCompilation: undefined,
     outputPath: '/Users/max/Sites/ratio-et-motus/dist/assets',
     outputFileSystem:
      NodeOutputFileSystem {
        mkdirp:
         { [Function: mkdirP]
           [length]: 4,
           [name]: 'mkdirP',
           [arguments]: null,
           [caller]: null,
           [prototype]: mkdirP { [constructor]: [Circular] },
           mkdirP: [Circular],
           mkdirp: [Circular],
           sync:
            { [Function: sync]
              [length]: 3,
              [name]: 'sync',
              [arguments]: null,
              [caller]: null,
              [prototype]: sync { [constructor]: [Circular] } } },
        mkdir:
         { [Function: bound mkdir] [length]: 3, [name]: 'bound mkdir' },
        rmdir:
         { [Function: bound rmdir] [length]: 2, [name]: 'bound rmdir' },
        unlink:
         { [Function: bound unlink] [length]: 2, [name]: 'bound unlink' },
        writeFile:
         { [Function: bound writeFile] [length]: 4, [name]: 'bound writeFile' },
        join: { [Function: bound join] [length]: 0, [name]: 'bound join' } },
     inputFileSystem:
      CachedInputFileSystem {
        fileSystem: NodeJsInputFileSystem {},
        _statStorage:
         Storage {
           duration: 60000,
           running: Map {},
           data: Map {},
           levels:
            [ Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              ... 13 more items,
              [length]: 113 ],
           count: 0,
           interval: null,
           needTickCheck: false,
           nextTick: null,
           passive: true,
           tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
        _readdirStorage:
         Storage {
           duration: 60000,
           running: Map {},
           data: Map {},
           levels:
            [ Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              ... 13 more items,
              [length]: 113 ],
           count: 0,
           interval: null,
           needTickCheck: false,
           nextTick: null,
           passive: true,
           tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
        _readFileStorage:
         Storage {
           duration: 60000,
           running: Map {},
           data: Map {},
           levels:
            [ Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              ... 13 more items,
              [length]: 113 ],
           count: 0,
           interval: null,
           needTickCheck: false,
           nextTick: null,
           passive: true,
           tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
        _readJsonStorage:
         Storage {
           duration: 60000,
           running: Map {},
           data: Map {},
           levels:
            [ Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              ... 13 more items,
              [length]: 113 ],
           count: 0,
           interval: null,
           needTickCheck: false,
           nextTick: null,
           passive: true,
           tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
        _readlinkStorage:
         Storage {
           duration: 60000,
           running: Map {},
           data: Map {},
           levels:
            [ Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              Set {},
              ... 13 more items,
              [length]: 113 ],
           count: 0,
           interval: null,
           needTickCheck: false,
           nextTick: null,
           passive: true,
           tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
        _stat:
         { [Function: bound bound ] [length]: 3, [name]: 'bound bound ' },
        _statSync:
         { [Function: bound bound ] [length]: 2, [name]: 'bound bound ' },
        _readdir:
         { [Function: bound readdir] [length]: 2, [name]: 'bound readdir' },
        _readdirSync:
         { [Function: bound readdirSync] [length]: 1, [name]: 'bound readdirSync' },
        _readFile:
         { [Function: bound bound readFile] [length]: 3, [name]: 'bound bound readFile' },
        _readFileSync:
         { [Function: bound bound readFileSync] [length]: 2, [name]: 'bound bound readFileSync' },
        _readJson: { [Function] [length]: 2, [name]: '' },
        _readJsonSync: { [Function] [length]: 1, [name]: '' },
        _readlink:
         { [Function: bound bound readlink] [length]: 3, [name]: 'bound bound readlink' },
        _readlinkSync:
         { [Function: bound bound readlinkSync] [length]: 2, [name]: 'bound bound readlinkSync' } },
     recordsInputPath: undefined,
     recordsOutputPath: undefined,
     records: {},
     removedFiles: Set {},
     fileTimestamps: Map {},
     contextTimestamps: Map {},
     resolverFactory:
      ResolverFactory {
        _pluginCompat:
         SyncBailHook {
           _args: [ 'options', [length]: 1 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'ResolverFactory' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'Tapable camelCase',
                stage: 100 },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'Tapable this.hooks',
                stage: 200 },
              [length]: 3 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        hooks:
         { resolveOptions:
            HookMap {
              _map:
               Map {
                 'normal' => SyncWaterfallHook {
                   _args: [ 'resolveOptions', [length]: 1 ],
                   taps:
                    [ { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'WebpackOptionsApply' },
                      [length]: 1 ],
                   interceptors: [ [length]: 0 ],
                   call:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   promise:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   callAsync:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   _x: undefined },
                 'context' => SyncWaterfallHook {
                   _args: [ 'resolveOptions', [length]: 1 ],
                   taps:
                    [ { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'WebpackOptionsApply' },
                      [length]: 1 ],
                   interceptors: [ [length]: 0 ],
                   call:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   promise:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   callAsync:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   _x: undefined },
                 'loader' => SyncWaterfallHook {
                   _args: [ 'resolveOptions', [length]: 1 ],
                   taps:
                    [ { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'WebpackOptionsApply' },
                      [length]: 1 ],
                   interceptors: [ [length]: 0 ],
                   call:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   promise:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   callAsync:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   _x: undefined },
                 [size]: 3 },
              _factory: { [Function] [length]: 0, [name]: '' },
              _interceptors: [ [length]: 0 ] },
           resolver:
            HookMap {
              _map:
               Map {
                 'normal' => SyncHook {
                   _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                   taps:
                    [ { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'NodeSourcePlugin' },
                      { type: 'sync',
                        fn: { [Function] [length]: 1, [name]: '' },
                        name: 'AMDPlugin' },
                      [length]: 38 ],
                   interceptors: [ [length]: 0 ],
                   call:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   promise:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   callAsync:
                    { [Function: lazyCompileHook]
                      [length]: 0,
                      [name]: 'lazyCompileHook',
                      [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                   _x: undefined },
                 [size]: 1 },
              _factory: { [Function] [length]: 0, [name]: '' },
              _interceptors: [ [length]: 0 ] } },
        cache2: Map {} },
     infrastructureLogger: { [Function: logger] [length]: 3, [name]: 'logger' },
     resolvers:
      { normal:
         { plugins:
            { [Function: deprecated]
              [length]: 0,
              [name]: 'deprecated',
              [prototype]: deprecated { [constructor]: [Circular] } },
           apply:
            { [Function: deprecated]
              [length]: 0,
              [name]: 'deprecated',
              [prototype]: deprecated { [constructor]: [Circular] } } },
        loader:
         { plugins:
            { [Function: deprecated]
              [length]: 0,
              [name]: 'deprecated',
              [prototype]: deprecated { [constructor]: [Circular] } },
           apply:
            { [Function: deprecated]
              [length]: 0,
              [name]: 'deprecated',
              [prototype]: deprecated { [constructor]: [Circular] } } },
        context:
         { plugins:
            { [Function: deprecated]
              [length]: 0,
              [name]: 'deprecated',
              [prototype]: deprecated { [constructor]: [Circular] } },
           apply:
            { [Function: deprecated]
              [length]: 0,
              [name]: 'deprecated',
              [prototype]: deprecated { [constructor]: [Circular] } } } },
     options:
      { mode: 'production',
        devtool: '',
        entry:
         { main:
            [ './src/assets/css/main.scss',
              './src/assets/js/main',
              [length]: 2 ] },
        output:
         { path: '/Users/max/Sites/ratio-et-motus/dist/assets',
           filename: '[name].js',
           chunkFilename: '[name].js?version=1583964033155',
           publicPath: '/dev/',
           webassemblyModuleFilename: '[modulehash].module.wasm',
           library: '',
           hotUpdateFunction: 'webpackHotUpdate',
           jsonpFunction: 'webpackJsonp',
           chunkCallbackName: 'webpackChunk',
           globalObject: 'window',
           devtoolNamespace: '',
           libraryTarget: 'var',
           pathinfo: false,
           sourceMapFilename: '[file].map[query]',
           hotUpdateChunkFilename: '[id].[hash].hot-update.js',
           hotUpdateMainFilename: '[hash].hot-update.json',
           crossOriginLoading: false,
           jsonpScriptType: false,
           chunkLoadTimeout: 120000,
           hashFunction: 'md4',
           hashDigest: 'hex',
           hashDigestLength: 20,
           devtoolLineToLine: false,
           strictModuleExceptionHandling: false },
        resolve:
         { modules:
            [ '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules',
              'node_modules',
              [length]: 2 ],
           alias:
            { lib: '/Users/max/Sites/ratio-et-motus/src/assets/js/lib',
              utils: '/Users/max/Sites/ratio-et-motus/src/assets/js/utils',
              store: '/Users/max/Sites/ratio-et-motus/src/assets/js/store',
              mixins: '/Users/max/Sites/ratio-et-motus/src/assets/js/mixins',
              modules: '/Users/max/Sites/ratio-et-motus/src/modules',
              vue: 'vue/dist/vue.js' },
           unsafeCache: true,
           extensions: [ '.wasm', '.mjs', '.js', '.json', [length]: 4 ],
           mainFiles: [ 'index', [length]: 1 ],
           aliasFields: [ 'browser', [length]: 1 ],
           mainFields: [ 'browser', 'module', 'main', [length]: 3 ],
           cacheWithContext: false },
        resolveLoader:
         { modules:
            [ '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules',
              'node_modules',
              [length]: 2 ],
           unsafeCache: true,
           mainFields: [ 'loader', 'main', [length]: 2 ],
           extensions: [ '.js', '.json', [length]: 2 ],
           mainFiles: [ 'index', [length]: 1 ],
           cacheWithContext: false },
        plugins:
         [ StylelintWebpackPlugin {
             options:
              { files:
                 [ 'src/assets/scss/**/*.scss',
                   'src/modules/**/*.scss',
                   'src/sections/**/*.scss',
                   [length]: 3 ],
                formatter:
                 { [Function]
                   [length]: 0,
                   [name]: '',
                   [prototype]:
                    { [constructor]:
                       { [Function] [length]: 0, [name]: '', [prototype]: [Circular] } } },
                stylelintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/stylelint' } },
           ExtractTextPlugin { filename: '[name].min.css.liquid', id: 1, options: {} },
           HtmlCriticalWebpackPlugin { options: undefined },
           NoEmitOnErrorsPlugin {},
           DefinePlugin {
             definitions:
              { 'process.env.NODE_ENV': '"production"',
                DEBUG: false,
                KIT_VERSION: '"0.0.1-beta.1"' } },
           DynamicPublicPathPlugin {
             options: { externalGlobal: '__GLOBAL__.cdn', chunkName: 'main' } },
           [length]: 6 ],
        externals: {},
        module:
         { rules:
            [ { test: { /\.js$/ [lastIndex]: 0 },
                use:
                 [ { loader:
                      '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader',
                     options:
                      { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                        sourceMaps: true,
                        presets: [ '@babel/preset-env', [length]: 1 ] } },
                   { loader:
                      '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader',
                     options:
                      { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                        autoChunk: true,
                        sortFunction: undefined } },
                   [length]: 2 ] },
              { enforce: 'pre',
                test: { /\.js$/ [lastIndex]: 0 },
                exclude: { /node_modules/ [lastIndex]: 0 },
                options:
                 { eslintPath:
                    '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                   fix: true },
                loader:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
              { test: { /\.s?css$/ [lastIndex]: 0 },
                use:
                 [ { loader:
                      '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js',
                     options: { omit: 1, remove: true } },
                   { loader:
                      '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                   { loader:
                      '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader',
                     options: { importLoaders: 1, sourceMap: true } },
                   { loader:
                      '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader',
                     options:
                      { ident: 'postcss',
                        plugins:
                         [ { [Function: creator]
                             [length]: 0,
                             [name]: 'creator',
                             [prototype]: [creator],
                             [postcss]: [Getter],
                             process: [Function],
                             data: [Object],
                             defaults: [Array],
                             info: [Function] },
                           [length]: 1 ] } },
                   { loader:
                      '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader',
                     options: { sourceMap: true } },
                   { loader:
                      '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader',
                     options:
                      { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                        sortFunction: undefined } },
                   [length]: 6 ] },
              [length]: 3 ],
           unknownContextRequest: '.',
           unknownContextRegExp: false,
           unknownContextRecursive: true,
           unknownContextCritical: true,
           exprContextRequest: '.',
           exprContextRegExp: false,
           exprContextRecursive: true,
           exprContextCritical: true,
           wrappedContextRegExp: { /.*/ [lastIndex]: 0 },
           wrappedContextRecursive: true,
           wrappedContextCritical: false,
           strictExportPresence: false,
           strictThisContextOnImports: false,
           unsafeCache: false,
           defaultRules:
            [ { type: 'javascript/auto', resolve: {} },
              { test: { /\.mjs$/i [lastIndex]: 0 },
                type: 'javascript/esm',
                resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
              { test: { /\.json$/i [lastIndex]: 0 }, type: 'json' },
              { test: { /\.wasm$/i [lastIndex]: 0 },
                type: 'webassembly/experimental' },
              [length]: 4 ] },
        stats: 'none',
        performance:
         { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
        optimization:
         { splitChunks:
            { automaticNameDelimiter: '-',
              hidePathInfo: true,
              chunks: 'async',
              minSize: 30000,
              minChunks: 1,
              maxAsyncRequests: 5,
              automaticNameMaxLength: 109,
              maxInitialRequests: 3,
              name: true,
              cacheGroups:
               { default:
                  { automaticNamePrefix: '',
                    reuseExistingChunk: true,
                    minChunks: 2,
                    priority: -20 },
                 vendors:
                  { automaticNamePrefix: 'vendors',
                    test: { /[\\\/]node_modules[\\\/]/ [lastIndex]: 0 },
                    priority: -10 } } },
           removeAvailableModules: true,
           removeEmptyChunks: true,
           mergeDuplicateChunks: true,
           flagIncludedChunks: true,
           occurrenceOrder: true,
           sideEffects: true,
           providedExports: true,
           usedExports: true,
           concatenateModules: true,
           runtimeChunk: undefined,
           noEmitOnErrors: true,
           checkWasmTypes: true,
           mangleWasmImports: false,
           namedModules: false,
           hashedModuleIds: false,
           namedChunks: false,
           portableRecords: false,
           minimize: true,
           minimizer:
            [ { apply: { [Function: apply] [length]: 1, [name]: 'apply' } },
              [length]: 1 ],
           nodeEnv: 'production' },
        cache: false,
        context: '/Users/max/Sites/ratio-et-motus',
        target: 'web',
        node:
         { console: false,
           process: true,
           global: true,
           Buffer: true,
           setImmediate: true,
           __filename: 'mock',
           __dirname: 'mock' },
        infrastructureLogging: { level: 'info', debug: false } },
     context: '/Users/max/Sites/ratio-et-motus',
     requestShortener:
      RequestShortener {
        currentDirectoryRegExp:
         { /(^|!)\/Users\/max\/Sites\/ratio\-et\-motus/g [lastIndex]: 0 },
        parentDirectoryRegExp: { /(^|!)\/Users\/max\/Sites\//g [lastIndex]: 0 },
        buildinsAsModule: false,
        buildinsRegExp:
         { /(^|!)\/Users\/max\/Sites\/@halfhelix:kit\/packages\/webpacker\/node_modules\/webpack/g [lastIndex]: 0 },
        cache: Map {} },
     running: true,
     watchMode: false,
     _assetEmittingSourceCache: WeakMap {  },
     _assetEmittingWrittenFiles: Map {},
     watchFileSystem:
      NodeWatchFileSystem {
        inputFileSystem:
         CachedInputFileSystem {
           fileSystem: NodeJsInputFileSystem {},
           _statStorage:
            Storage {
              duration: 60000,
              running: Map {},
              data: Map {},
              levels:
               [ Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 ... 13 more items,
                 [length]: 113 ],
              count: 0,
              interval: null,
              needTickCheck: false,
              nextTick: null,
              passive: true,
              tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
           _readdirStorage:
            Storage {
              duration: 60000,
              running: Map {},
              data: Map {},
              levels:
               [ Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 ... 13 more items,
                 [length]: 113 ],
              count: 0,
              interval: null,
              needTickCheck: false,
              nextTick: null,
              passive: true,
              tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
           _readFileStorage:
            Storage {
              duration: 60000,
              running: Map {},
              data: Map {},
              levels:
               [ Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 ... 13 more items,
                 [length]: 113 ],
              count: 0,
              interval: null,
              needTickCheck: false,
              nextTick: null,
              passive: true,
              tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
           _readJsonStorage:
            Storage {
              duration: 60000,
              running: Map {},
              data: Map {},
              levels:
               [ Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 ... 13 more items,
                 [length]: 113 ],
              count: 0,
              interval: null,
              needTickCheck: false,
              nextTick: null,
              passive: true,
              tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
           _readlinkStorage:
            Storage {
              duration: 60000,
              running: Map {},
              data: Map {},
              levels:
               [ Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 Set {},
                 ... 13 more items,
                 [length]: 113 ],
              count: 0,
              interval: null,
              needTickCheck: false,
              nextTick: null,
              passive: true,
              tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
           _stat:
            { [Function: bound bound ] [length]: 3, [name]: 'bound bound ' },
           _statSync:
            { [Function: bound bound ] [length]: 2, [name]: 'bound bound ' },
           _readdir:
            { [Function: bound readdir] [length]: 2, [name]: 'bound readdir' },
           _readdirSync:
            { [Function: bound readdirSync] [length]: 1, [name]: 'bound readdirSync' },
           _readFile:
            { [Function: bound bound readFile] [length]: 3, [name]: 'bound bound readFile' },
           _readFileSync:
            { [Function: bound bound readFileSync] [length]: 2, [name]: 'bound bound readFileSync' },
           _readJson: { [Function] [length]: 2, [name]: '' },
           _readJsonSync: { [Function] [length]: 1, [name]: '' },
           _readlink:
            { [Function: bound bound readlink] [length]: 3, [name]: 'bound bound readlink' },
           _readlinkSync:
            { [Function: bound bound readlinkSync] [length]: 2, [name]: 'bound bound readlinkSync' } },
        watcherOptions: { aggregateTimeout: 200 },
        watcher:
         EventEmitter {
           _events: [Object: null prototype] {},
           _eventsCount: 0,
           _maxListeners: undefined,
           options: { aggregateTimeout: 200 },
           watcherOptions: { ignored: undefined, poll: undefined },
           fileWatchers: [ [length]: 0 ],
           dirWatchers: [ [length]: 0 ],
           mtimes: [Object: null prototype] {},
           paused: false,
           aggregatedChanges: [ [length]: 0 ],
           aggregatedRemovals: [ [length]: 0 ],
           aggregateTimeout: 0,
           _onTimeout:
            { [Function: bound _onTimeout] [length]: 0, [name]: 'bound _onTimeout' } } },
     dependencies: undefined },
  resolverFactory:
   ResolverFactory {
     _pluginCompat:
      SyncBailHook {
        _args: [ 'options', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'ResolverFactory' },
           { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'Tapable camelCase',
             stage: 100 },
           { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'Tapable this.hooks',
             stage: 200 },
           [length]: 3 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     hooks:
      { resolveOptions:
         HookMap {
           _map:
            Map {
              'normal' => SyncWaterfallHook {
                _args: [ 'resolveOptions', [length]: 1 ],
                taps:
                 [ { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'WebpackOptionsApply' },
                   [length]: 1 ],
                interceptors: [ [length]: 0 ],
                call:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                promise:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                callAsync:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                _x: undefined },
              'context' => SyncWaterfallHook {
                _args: [ 'resolveOptions', [length]: 1 ],
                taps:
                 [ { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'WebpackOptionsApply' },
                   [length]: 1 ],
                interceptors: [ [length]: 0 ],
                call:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                promise:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                callAsync:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                _x: undefined },
              'loader' => SyncWaterfallHook {
                _args: [ 'resolveOptions', [length]: 1 ],
                taps:
                 [ { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'WebpackOptionsApply' },
                   [length]: 1 ],
                interceptors: [ [length]: 0 ],
                call:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                promise:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                callAsync:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                _x: undefined },
              [size]: 3 },
           _factory: { [Function] [length]: 0, [name]: '' },
           _interceptors: [ [length]: 0 ] },
        resolver:
         HookMap {
           _map:
            Map {
              'normal' => SyncHook {
                _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                taps:
                 [ { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'NodeSourcePlugin' },
                   { type: 'sync',
                     fn: { [Function] [length]: 1, [name]: '' },
                     name: 'AMDPlugin' },
                   [length]: 38 ],
                interceptors: [ [length]: 0 ],
                call:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                promise:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                callAsync:
                 { [Function: lazyCompileHook]
                   [length]: 0,
                   [name]: 'lazyCompileHook',
                   [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                _x: undefined },
              [size]: 1 },
           _factory: { [Function] [length]: 0, [name]: '' },
           _interceptors: [ [length]: 0 ] } },
     cache2: Map {} },
  inputFileSystem:
   CachedInputFileSystem {
     fileSystem: NodeJsInputFileSystem {},
     _statStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels:
         [ Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           ... 13 more items,
           [length]: 113 ],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
     _readdirStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels:
         [ Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           ... 13 more items,
           [length]: 113 ],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
     _readFileStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels:
         [ Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           ... 13 more items,
           [length]: 113 ],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
     _readJsonStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels:
         [ Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           ... 13 more items,
           [length]: 113 ],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
     _readlinkStorage:
      Storage {
        duration: 60000,
        running: Map {},
        data: Map {},
        levels:
         [ Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           Set {},
           ... 13 more items,
           [length]: 113 ],
        count: 0,
        interval: null,
        needTickCheck: false,
        nextTick: null,
        passive: true,
        tick: { [Function: bound tick] [length]: 0, [name]: 'bound tick' } },
     _stat:
      { [Function: bound bound ] [length]: 3, [name]: 'bound bound ' },
     _statSync:
      { [Function: bound bound ] [length]: 2, [name]: 'bound bound ' },
     _readdir:
      { [Function: bound readdir] [length]: 2, [name]: 'bound readdir' },
     _readdirSync:
      { [Function: bound readdirSync] [length]: 1, [name]: 'bound readdirSync' },
     _readFile:
      { [Function: bound bound readFile] [length]: 3, [name]: 'bound bound readFile' },
     _readFileSync:
      { [Function: bound bound readFileSync] [length]: 2, [name]: 'bound bound readFileSync' },
     _readJson: { [Function] [length]: 2, [name]: '' },
     _readJsonSync: { [Function] [length]: 1, [name]: '' },
     _readlink:
      { [Function: bound bound readlink] [length]: 3, [name]: 'bound bound readlink' },
     _readlinkSync:
      { [Function: bound bound readlinkSync] [length]: 2, [name]: 'bound bound readlinkSync' } },
  requestShortener:
   RequestShortener {
     currentDirectoryRegExp:
      { /(^|!)\/Users\/max\/Sites\/ratio\-et\-motus/g [lastIndex]: 0 },
     parentDirectoryRegExp: { /(^|!)\/Users\/max\/Sites\//g [lastIndex]: 0 },
     buildinsAsModule: false,
     buildinsRegExp:
      { /(^|!)\/Users\/max\/Sites\/@halfhelix:kit\/packages\/webpacker\/node_modules\/webpack/g [lastIndex]: 0 },
     cache: Map {} },
  options:
   { mode: 'production',
     devtool: '',
     entry:
      { main:
         [ './src/assets/css/main.scss',
           './src/assets/js/main',
           [length]: 2 ] },
     output:
      { path: '/Users/max/Sites/ratio-et-motus/dist/assets',
        filename: '[name].js',
        chunkFilename: '[name].js?version=1583964033155',
        publicPath: '/dev/',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'window',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: false,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     resolve:
      { modules:
         [ '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules',
           'node_modules',
           [length]: 2 ],
        alias:
         { lib: '/Users/max/Sites/ratio-et-motus/src/assets/js/lib',
           utils: '/Users/max/Sites/ratio-et-motus/src/assets/js/utils',
           store: '/Users/max/Sites/ratio-et-motus/src/assets/js/store',
           mixins: '/Users/max/Sites/ratio-et-motus/src/assets/js/mixins',
           modules: '/Users/max/Sites/ratio-et-motus/src/modules',
           vue: 'vue/dist/vue.js' },
        unsafeCache: true,
        extensions: [ '.wasm', '.mjs', '.js', '.json', [length]: 4 ],
        mainFiles: [ 'index', [length]: 1 ],
        aliasFields: [ 'browser', [length]: 1 ],
        mainFields: [ 'browser', 'module', 'main', [length]: 3 ],
        cacheWithContext: false },
     resolveLoader:
      { modules:
         [ '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules',
           'node_modules',
           [length]: 2 ],
        unsafeCache: true,
        mainFields: [ 'loader', 'main', [length]: 2 ],
        extensions: [ '.js', '.json', [length]: 2 ],
        mainFiles: [ 'index', [length]: 1 ],
        cacheWithContext: false },
     plugins:
      [ StylelintWebpackPlugin {
          options:
           { files:
              [ 'src/assets/scss/**/*.scss',
                'src/modules/**/*.scss',
                'src/sections/**/*.scss',
                [length]: 3 ],
             formatter:
              { [Function]
                [length]: 0,
                [name]: '',
                [prototype]:
                 { [constructor]:
                    { [Function] [length]: 0, [name]: '', [prototype]: [Circular] } } },
             stylelintPath:
              '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/stylelint' } },
        ExtractTextPlugin { filename: '[name].min.css.liquid', id: 1, options: {} },
        HtmlCriticalWebpackPlugin { options: undefined },
        NoEmitOnErrorsPlugin {},
        DefinePlugin {
          definitions:
           { 'process.env.NODE_ENV': '"production"',
             DEBUG: false,
             KIT_VERSION: '"0.0.1-beta.1"' } },
        DynamicPublicPathPlugin {
          options: { externalGlobal: '__GLOBAL__.cdn', chunkName: 'main' } },
        [length]: 6 ],
     externals: {},
     module:
      { rules:
         [ { test: { /\.js$/ [lastIndex]: 0 },
             use:
              [ { loader:
                   '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader',
                  options:
                   { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                     sourceMaps: true,
                     presets: [ '@babel/preset-env', [length]: 1 ] } },
                { loader:
                   '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader',
                  options:
                   { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                     autoChunk: true,
                     sortFunction: undefined } },
                [length]: 2 ] },
           { enforce: 'pre',
             test: { /\.js$/ [lastIndex]: 0 },
             exclude: { /node_modules/ [lastIndex]: 0 },
             options:
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             loader:
              '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
           { test: { /\.s?css$/ [lastIndex]: 0 },
             use:
              [ { loader:
                   '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js',
                  options: { omit: 1, remove: true } },
                { loader:
                   '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                { loader:
                   '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader',
                  options: { importLoaders: 1, sourceMap: true } },
                { loader:
                   '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader',
                  options:
                   { ident: 'postcss',
                     plugins:
                      [ { [Function: creator]
                          [length]: 0,
                          [name]: 'creator',
                          [prototype]: creator { [constructor]: [Circular] },
                          [postcss]: [Getter],
                          process:
                           { [Function] [length]: 3, [name]: '', [prototype]: [Object] },
                          data: { browsers: [Object], prefixes: [Object] },
                          defaults:
                           [ '> 0.5%',
                             'last 2 versions',
                             'Firefox ESR',
                             'not dead',
                             [length]: 4 ],
                          info:
                           { [Function] [length]: 0, [name]: '', [prototype]: [Object] } },
                        [length]: 1 ] } },
                { loader:
                   '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader',
                  options: { sourceMap: true } },
                { loader:
                   '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader',
                  options:
                   { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                     sortFunction: undefined } },
                [length]: 6 ] },
           [length]: 3 ],
        unknownContextRequest: '.',
        unknownContextRegExp: false,
        unknownContextRecursive: true,
        unknownContextCritical: true,
        exprContextRequest: '.',
        exprContextRegExp: false,
        exprContextRecursive: true,
        exprContextCritical: true,
        wrappedContextRegExp: { /.*/ [lastIndex]: 0 },
        wrappedContextRecursive: true,
        wrappedContextCritical: false,
        strictExportPresence: false,
        strictThisContextOnImports: false,
        unsafeCache: false,
        defaultRules:
         [ { type: 'javascript/auto', resolve: {} },
           { test: { /\.mjs$/i [lastIndex]: 0 },
             type: 'javascript/esm',
             resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
           { test: { /\.json$/i [lastIndex]: 0 }, type: 'json' },
           { test: { /\.wasm$/i [lastIndex]: 0 },
             type: 'webassembly/experimental' },
           [length]: 4 ] },
     stats: 'none',
     performance:
      { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
     optimization:
      { splitChunks:
         { automaticNameDelimiter: '-',
           hidePathInfo: true,
           chunks: 'async',
           minSize: 30000,
           minChunks: 1,
           maxAsyncRequests: 5,
           automaticNameMaxLength: 109,
           maxInitialRequests: 3,
           name: true,
           cacheGroups:
            { default:
               { automaticNamePrefix: '',
                 reuseExistingChunk: true,
                 minChunks: 2,
                 priority: -20 },
              vendors:
               { automaticNamePrefix: 'vendors',
                 test: { /[\\\/]node_modules[\\\/]/ [lastIndex]: 0 },
                 priority: -10 } } },
        removeAvailableModules: true,
        removeEmptyChunks: true,
        mergeDuplicateChunks: true,
        flagIncludedChunks: true,
        occurrenceOrder: true,
        sideEffects: true,
        providedExports: true,
        usedExports: true,
        concatenateModules: true,
        runtimeChunk: undefined,
        noEmitOnErrors: true,
        checkWasmTypes: true,
        mangleWasmImports: false,
        namedModules: false,
        hashedModuleIds: false,
        namedChunks: false,
        portableRecords: false,
        minimize: true,
        minimizer:
         [ { apply: { [Function: apply] [length]: 1, [name]: 'apply' } },
           [length]: 1 ],
        nodeEnv: 'production' },
     cache: false,
     context: '/Users/max/Sites/ratio-et-motus',
     target: 'web',
     node:
      { console: false,
        process: true,
        global: true,
        Buffer: true,
        setImmediate: true,
        __filename: 'mock',
        __dirname: 'mock' },
     infrastructureLogging: { level: 'info', debug: false } },
  outputOptions:
   { path: '/Users/max/Sites/ratio-et-motus/dist/assets',
     filename: '[name].js',
     chunkFilename: '[name].js?version=1583964033155',
     publicPath: '/dev/',
     webassemblyModuleFilename: '[modulehash].module.wasm',
     library: '',
     hotUpdateFunction: 'webpackHotUpdate',
     jsonpFunction: 'webpackJsonp',
     chunkCallbackName: 'webpackChunk',
     globalObject: 'window',
     devtoolNamespace: '',
     libraryTarget: 'var',
     pathinfo: false,
     sourceMapFilename: '[file].map[query]',
     hotUpdateChunkFilename: '[id].[hash].hot-update.js',
     hotUpdateMainFilename: '[hash].hot-update.json',
     crossOriginLoading: false,
     jsonpScriptType: false,
     chunkLoadTimeout: 120000,
     hashFunction: 'md4',
     hashDigest: 'hex',
     hashDigestLength: 20,
     devtoolLineToLine: false,
     strictModuleExceptionHandling: false },
  bail: undefined,
  profile: undefined,
  performance:
   { hints: false, maxAssetSize: 250000, maxEntrypointSize: 250000 },
  mainTemplate:
   MainTemplate {
     _pluginCompat:
      SyncBailHook {
        _args: [ 'options', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'Tapable camelCase',
             stage: 100 },
           { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'Tapable this.hooks',
             stage: 200 },
           [length]: 2 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     outputOptions:
      { path: '/Users/max/Sites/ratio-et-motus/dist/assets',
        filename: '[name].js',
        chunkFilename: '[name].js?version=1583964033155',
        publicPath: '/dev/',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'window',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: false,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     hooks:
      { renderManifest:
         SyncWaterfallHook {
           _args: [ 'result', 'options', [length]: 2 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'JavascriptModulesPlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        modules:
         SyncWaterfallHook {
           _args:
            [ 'modules',
              'chunk',
              'hash',
              'moduleTemplate',
              'dependencyTemplates',
              [length]: 5 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 5, [name]: '' },
                name: 'JavascriptModulesPlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        moduleObj:
         SyncWaterfallHook {
           _args:
            [ 'source', 'chunk', 'hash', 'moduleIdExpression', [length]: 4 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 4, [name]: '' },
                name: 'MainTemplate' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        requireEnsure:
         SyncWaterfallHook {
           _args:
            [ 'source', 'chunk', 'hash', 'chunkIdExpression', [length]: 4 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'JsonpMainTemplatePlugin load' },
              { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'WasmMainTemplatePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'JsonpMainTemplatePlugin preload',
                stage: 10 },
              [length]: 3 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        bootstrap:
         SyncWaterfallHook {
           _args:
            [ 'source',
              'chunk',
              'hash',
              'moduleTemplate',
              'dependencyTemplates',
              [length]: 5 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'JsonpMainTemplatePlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        localVars:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', 'hash', [length]: 3 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'MainTemplate' },
              { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'JsonpMainTemplatePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'WasmMainTemplatePlugin' },
              [length]: 3 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        require:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', 'hash', [length]: 3 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'MainTemplate' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        requireExtensions:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', 'hash', [length]: 3 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'MainTemplate' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'JsonpMainTemplatePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'WasmMainTemplatePlugin' },
              [length]: 3 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        beforeStartup:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', 'hash', [length]: 3 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'JsonpMainTemplatePlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        startup:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', 'hash', [length]: 3 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'MainTemplate' },
              { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'JsonpMainTemplatePlugin' },
              [length]: 2 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        afterStartup:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', 'hash', [length]: 3 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'JsonpMainTemplatePlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        render:
         SyncWaterfallHook {
           _args:
            [ 'source',
              'chunk',
              'hash',
              'moduleTemplate',
              'dependencyTemplates',
              [length]: 5 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 5, [name]: '' },
                name: 'MainTemplate' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        renderWithEntry:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', 'hash', [length]: 3 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        moduleRequire:
         SyncWaterfallHook {
           _args:
            [ 'source', 'chunk', 'hash', 'moduleIdExpression', [length]: 4 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        addModule:
         SyncWaterfallHook {
           _args:
            [ 'source',
              'chunk',
              'hash',
              'moduleIdExpression',
              'moduleExpression',
              [length]: 5 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        currentHash:
         SyncWaterfallHook {
           _args: [ 'source', 'requestedLength', [length]: 2 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        assetPath:
         SyncWaterfallHook {
           _args: [ 'path', 'options', 'assetInfo', [length]: 3 ],
           taps:
            [ { type: 'sync',
                fn:
                 { [Function: replacePathVariables] [length]: 3, [name]: 'replacePathVariables' },
                name: 'TemplatedPathPlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        hash:
         SyncHook {
           _args: [ 'hash', [length]: 1 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'JsonpMainTemplatePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'WasmMainTemplatePlugin' },
              [length]: 2 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        hashForChunk:
         SyncHook {
           _args: [ 'hash', 'chunk', [length]: 2 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'TerserPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'TemplatedPathPlugin' },
              [length]: 2 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        globalHashPaths:
         SyncWaterfallHook {
           _args: [ 'paths', [length]: 1 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        globalHash:
         SyncBailHook {
           _args: [ 'chunk', 'paths', [length]: 2 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'TemplatedPathPlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        hotBootstrap:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', 'hash', [length]: 3 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'JsonpMainTemplatePlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        jsonpScript:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', 'hash', [length]: 3 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'JsonpMainTemplatePlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        linkPreload:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', 'hash', [length]: 3 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'JsonpMainTemplatePlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        linkPrefetch:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', 'hash', [length]: 3 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 3, [name]: '' },
                name: 'JsonpMainTemplatePlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined } },
     requireFn: '__webpack_require__' },
  chunkTemplate:
   ChunkTemplate {
     _pluginCompat:
      SyncBailHook {
        _args: [ 'options', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'Tapable camelCase',
             stage: 100 },
           { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'Tapable this.hooks',
             stage: 200 },
           [length]: 2 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     outputOptions:
      { path: '/Users/max/Sites/ratio-et-motus/dist/assets',
        filename: '[name].js',
        chunkFilename: '[name].js?version=1583964033155',
        publicPath: '/dev/',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'window',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: false,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     hooks:
      { renderManifest:
         SyncWaterfallHook {
           _args: [ 'result', 'options', [length]: 2 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'JavascriptModulesPlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'WebAssemblyModulesPlugin' },
              [length]: 2 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        modules:
         SyncWaterfallHook {
           _args:
            [ 'source',
              'chunk',
              'moduleTemplate',
              'dependencyTemplates',
              [length]: 4 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        render:
         SyncWaterfallHook {
           _args:
            [ 'source',
              'chunk',
              'moduleTemplate',
              'dependencyTemplates',
              [length]: 4 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'JsonpChunkTemplatePlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        renderWithEntry:
         SyncWaterfallHook {
           _args: [ 'source', 'chunk', [length]: 2 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        hash:
         SyncHook {
           _args: [ 'hash', [length]: 1 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'JsonpChunkTemplatePlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        hashForChunk:
         SyncHook {
           _args: [ 'hash', 'chunk', [length]: 2 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 2, [name]: '' },
                name: 'JsonpChunkTemplatePlugin' },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'TerserPlugin' },
              [length]: 2 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined } } },
  hotUpdateChunkTemplate:
   HotUpdateChunkTemplate {
     _pluginCompat:
      SyncBailHook {
        _args: [ 'options', [length]: 1 ],
        taps:
         [ { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'Tapable camelCase',
             stage: 100 },
           { type: 'sync',
             fn: { [Function] [length]: 1, [name]: '' },
             name: 'Tapable this.hooks',
             stage: 200 },
           [length]: 2 ],
        interceptors: [ [length]: 0 ],
        call:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        promise:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        callAsync:
         { [Function: lazyCompileHook]
           [length]: 0,
           [name]: 'lazyCompileHook',
           [prototype]: lazyCompileHook { [constructor]: [Circular] } },
        _x: undefined },
     outputOptions:
      { path: '/Users/max/Sites/ratio-et-motus/dist/assets',
        filename: '[name].js',
        chunkFilename: '[name].js?version=1583964033155',
        publicPath: '/dev/',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'window',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: false,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     hooks:
      { modules:
         SyncWaterfallHook {
           _args:
            [ 'source',
              'modules',
              'removedModules',
              'moduleTemplate',
              'dependencyTemplates',
              [length]: 5 ],
           taps: [ [length]: 0 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        render:
         SyncWaterfallHook {
           _args:
            [ 'source',
              'modules',
              'removedModules',
              'hash',
              'id',
              'moduleTemplate',
              'dependencyTemplates',
              [length]: 7 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 5, [name]: '' },
                name: 'JsonpHotUpdateChunkTemplatePlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        hash:
         SyncHook {
           _args: [ 'hash', [length]: 1 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'JsonpHotUpdateChunkTemplatePlugin' },
              [length]: 1 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined } } },
  runtimeTemplate:
   RuntimeTemplate {
     outputOptions:
      { path: '/Users/max/Sites/ratio-et-motus/dist/assets',
        filename: '[name].js',
        chunkFilename: '[name].js?version=1583964033155',
        publicPath: '/dev/',
        webassemblyModuleFilename: '[modulehash].module.wasm',
        library: '',
        hotUpdateFunction: 'webpackHotUpdate',
        jsonpFunction: 'webpackJsonp',
        chunkCallbackName: 'webpackChunk',
        globalObject: 'window',
        devtoolNamespace: '',
        libraryTarget: 'var',
        pathinfo: false,
        sourceMapFilename: '[file].map[query]',
        hotUpdateChunkFilename: '[id].[hash].hot-update.js',
        hotUpdateMainFilename: '[hash].hot-update.json',
        crossOriginLoading: false,
        jsonpScriptType: false,
        chunkLoadTimeout: 120000,
        hashFunction: 'md4',
        hashDigest: 'hex',
        hashDigestLength: 20,
        devtoolLineToLine: false,
        strictModuleExceptionHandling: false },
     requestShortener:
      RequestShortener {
        currentDirectoryRegExp:
         { /(^|!)\/Users\/max\/Sites\/ratio\-et\-motus/g [lastIndex]: 0 },
        parentDirectoryRegExp: { /(^|!)\/Users\/max\/Sites\//g [lastIndex]: 0 },
        buildinsAsModule: false,
        buildinsRegExp:
         { /(^|!)\/Users\/max\/Sites\/@halfhelix:kit\/packages\/webpacker\/node_modules\/webpack/g [lastIndex]: 0 },
        cache: Map {} } },
  moduleTemplates:
   { javascript:
      ModuleTemplate {
        _pluginCompat:
         SyncBailHook {
           _args: [ 'options', [length]: 1 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'Tapable camelCase',
                stage: 100 },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'Tapable this.hooks',
                stage: 200 },
              [length]: 2 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        runtimeTemplate:
         RuntimeTemplate {
           outputOptions:
            { path: '/Users/max/Sites/ratio-et-motus/dist/assets',
              filename: '[name].js',
              chunkFilename: '[name].js?version=1583964033155',
              publicPath: '/dev/',
              webassemblyModuleFilename: '[modulehash].module.wasm',
              library: '',
              hotUpdateFunction: 'webpackHotUpdate',
              jsonpFunction: 'webpackJsonp',
              chunkCallbackName: 'webpackChunk',
              globalObject: 'window',
              devtoolNamespace: '',
              libraryTarget: 'var',
              pathinfo: false,
              sourceMapFilename: '[file].map[query]',
              hotUpdateChunkFilename: '[id].[hash].hot-update.js',
              hotUpdateMainFilename: '[hash].hot-update.json',
              crossOriginLoading: false,
              jsonpScriptType: false,
              chunkLoadTimeout: 120000,
              hashFunction: 'md4',
              hashDigest: 'hex',
              hashDigestLength: 20,
              devtoolLineToLine: false,
              strictModuleExceptionHandling: false },
           requestShortener:
            RequestShortener {
              currentDirectoryRegExp:
               { /(^|!)\/Users\/max\/Sites\/ratio\-et\-motus/g [lastIndex]: 0 },
              parentDirectoryRegExp: { /(^|!)\/Users\/max\/Sites\//g [lastIndex]: 0 },
              buildinsAsModule: false,
              buildinsRegExp:
               { /(^|!)\/Users\/max\/Sites\/@halfhelix:kit\/packages\/webpacker\/node_modules\/webpack/g [lastIndex]: 0 },
              cache: Map {} } },
        type: 'javascript',
        hooks:
         { content:
            SyncWaterfallHook {
              _args:
               [ 'source',
                 'module',
                 'options',
                 'dependencyTemplates',
                 [length]: 4 ],
              taps: [ [length]: 0 ],
              interceptors: [ [length]: 0 ],
              call:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              promise:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              callAsync:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              _x: undefined },
           module:
            SyncWaterfallHook {
              _args:
               [ 'source',
                 'module',
                 'options',
                 'dependencyTemplates',
                 [length]: 4 ],
              taps: [ [length]: 0 ],
              interceptors: [ [length]: 0 ],
              call:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              promise:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              callAsync:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              _x: undefined },
           render:
            SyncWaterfallHook {
              _args:
               [ 'source',
                 'module',
                 'options',
                 'dependencyTemplates',
                 [length]: 4 ],
              taps:
               [ { type: 'sync',
                   fn: { [Function] [length]: 2, [name]: '' },
                   name: 'FunctionModuleTemplatePlugin' },
                 [length]: 1 ],
              interceptors: [ [length]: 0 ],
              call:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              promise:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              callAsync:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              _x: undefined },
           package:
            SyncWaterfallHook {
              _args:
               [ 'source',
                 'module',
                 'options',
                 'dependencyTemplates',
                 [length]: 4 ],
              taps:
               [ { type: 'sync',
                   fn: { [Function] [length]: 2, [name]: '' },
                   name: 'FunctionModuleTemplatePlugin' },
                 [length]: 1 ],
              interceptors: [ [length]: 0 ],
              call:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              promise:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              callAsync:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              _x: undefined },
           hash:
            SyncHook {
              _args: [ 'hash', [length]: 1 ],
              taps:
               [ { type: 'sync',
                   fn: { [Function] [length]: 1, [name]: '' },
                   name: 'FunctionModuleTemplatePlugin' },
                 [length]: 1 ],
              interceptors: [ [length]: 0 ],
              call:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              promise:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              callAsync:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              _x: undefined } } },
     webassembly:
      ModuleTemplate {
        _pluginCompat:
         SyncBailHook {
           _args: [ 'options', [length]: 1 ],
           taps:
            [ { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'Tapable camelCase',
                stage: 100 },
              { type: 'sync',
                fn: { [Function] [length]: 1, [name]: '' },
                name: 'Tapable this.hooks',
                stage: 200 },
              [length]: 2 ],
           interceptors: [ [length]: 0 ],
           call:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           promise:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           callAsync:
            { [Function: lazyCompileHook]
              [length]: 0,
              [name]: 'lazyCompileHook',
              [prototype]: lazyCompileHook { [constructor]: [Circular] } },
           _x: undefined },
        runtimeTemplate:
         RuntimeTemplate {
           outputOptions:
            { path: '/Users/max/Sites/ratio-et-motus/dist/assets',
              filename: '[name].js',
              chunkFilename: '[name].js?version=1583964033155',
              publicPath: '/dev/',
              webassemblyModuleFilename: '[modulehash].module.wasm',
              library: '',
              hotUpdateFunction: 'webpackHotUpdate',
              jsonpFunction: 'webpackJsonp',
              chunkCallbackName: 'webpackChunk',
              globalObject: 'window',
              devtoolNamespace: '',
              libraryTarget: 'var',
              pathinfo: false,
              sourceMapFilename: '[file].map[query]',
              hotUpdateChunkFilename: '[id].[hash].hot-update.js',
              hotUpdateMainFilename: '[hash].hot-update.json',
              crossOriginLoading: false,
              jsonpScriptType: false,
              chunkLoadTimeout: 120000,
              hashFunction: 'md4',
              hashDigest: 'hex',
              hashDigestLength: 20,
              devtoolLineToLine: false,
              strictModuleExceptionHandling: false },
           requestShortener:
            RequestShortener {
              currentDirectoryRegExp:
               { /(^|!)\/Users\/max\/Sites\/ratio\-et\-motus/g [lastIndex]: 0 },
              parentDirectoryRegExp: { /(^|!)\/Users\/max\/Sites\//g [lastIndex]: 0 },
              buildinsAsModule: false,
              buildinsRegExp:
               { /(^|!)\/Users\/max\/Sites\/@halfhelix:kit\/packages\/webpacker\/node_modules\/webpack/g [lastIndex]: 0 },
              cache: Map {} } },
        type: 'webassembly',
        hooks:
         { content:
            SyncWaterfallHook {
              _args:
               [ 'source',
                 'module',
                 'options',
                 'dependencyTemplates',
                 [length]: 4 ],
              taps: [ [length]: 0 ],
              interceptors: [ [length]: 0 ],
              call:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              promise:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              callAsync:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              _x: undefined },
           module:
            SyncWaterfallHook {
              _args:
               [ 'source',
                 'module',
                 'options',
                 'dependencyTemplates',
                 [length]: 4 ],
              taps: [ [length]: 0 ],
              interceptors: [ [length]: 0 ],
              call:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              promise:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              callAsync:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              _x: undefined },
           render:
            SyncWaterfallHook {
              _args:
               [ 'source',
                 'module',
                 'options',
                 'dependencyTemplates',
                 [length]: 4 ],
              taps: [ [length]: 0 ],
              interceptors: [ [length]: 0 ],
              call:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              promise:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              callAsync:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              _x: undefined },
           package:
            SyncWaterfallHook {
              _args:
               [ 'source',
                 'module',
                 'options',
                 'dependencyTemplates',
                 [length]: 4 ],
              taps: [ [length]: 0 ],
              interceptors: [ [length]: 0 ],
              call:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              promise:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              callAsync:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              _x: undefined },
           hash:
            SyncHook {
              _args: [ 'hash', [length]: 1 ],
              taps: [ [length]: 0 ],
              interceptors: [ [length]: 0 ],
              call:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              promise:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              callAsync:
               { [Function: lazyCompileHook]
                 [length]: 0,
                 [name]: 'lazyCompileHook',
                 [prototype]: lazyCompileHook { [constructor]: [Circular] } },
              _x: undefined } } } },
  semaphore:
   Semaphore {
     available: 100,
     waiters: [ [length]: 0 ],
     _continue:
      { [Function: bound _continue] [length]: 0, [name]: 'bound _continue' } },
  entries: [ [length]: 0 ],
  _preparedEntrypoints: [ [length]: 0 ],
  entrypoints: Map {},
  chunks: [ [length]: 0 ],
  chunkGroups: [ [length]: 0 ],
  namedChunkGroups: Map {},
  namedChunks: Map {},
  modules: [ [length]: 0 ],
  _modules: Map {},
  cache: null,
  records: {},
  additionalChunkAssets: [ [length]: 0 ],
  assets: {},
  assetsInfo: Map {},
  errors: [ [length]: 0 ],
  warnings: [ [length]: 0 ],
  children: [ [length]: 0 ],
  logging: Map {},
  dependencyFactories:
   Map {
     { [Function: ConstDependency]
       [length]: 3,
       [prototype]:
        ConstDependency {
          [constructor]: [Circular],
          [updateHash]: { [Function: updateHash] [length]: 1, [name]: 'updateHash' } },
       [name]: 'ConstDependency',
       Template:
        { [Function: ConstDependencyTemplate]
          [length]: 0,
          [prototype]:
           ConstDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' } },
          [name]: 'ConstDependencyTemplate' } } => NullFactory {},
     { [Function: WebAssemblyImportDependency]
       [length]: 4,
       [prototype]:
        WebAssemblyImportDependency {
          [constructor]: [Circular],
          [getReference]:
           { [Function: getReference] [length]: 0, [name]: 'getReference' },
          [getErrors]: { [Function: getErrors] [length]: 0, [name]: 'getErrors' },
          [type]: [Getter] },
       [name]: 'WebAssemblyImportDependency' } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: WebAssemblyExportImportedDependency]
       [length]: 4,
       [prototype]:
        WebAssemblyExportImportedDependency {
          [constructor]: [Circular],
          [getReference]:
           { [Function: getReference] [length]: 0, [name]: 'getReference' },
          [type]: [Getter] },
       [name]: 'WebAssemblyExportImportedDependency' } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: MultiEntryDependency]
       [length]: 2,
       [prototype]:
        MultiEntryDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'MultiEntryDependency' } => MultiModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 2 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks: {} },
     { [Function: SingleEntryDependency]
       [length]: 1,
       [prototype]:
        SingleEntryDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'SingleEntryDependency' } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: HarmonyCompatibilityDependency]
       [length]: 1,
       [prototype]:
        HarmonyCompatibilityDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'HarmonyCompatibilityDependency',
       Template:
        { [Function: HarmonyExportDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyExportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'HarmonyExportDependencyTemplate' } } => NullFactory {},
     { [Function: HarmonyInitDependency]
       [length]: 1,
       [prototype]:
        HarmonyInitDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'HarmonyInitDependency',
       Template:
        { [Function: HarmonyInitDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyInitDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 4, [name]: 'apply' } },
          [name]: 'HarmonyInitDependencyTemplate' } } => NullFactory {},
     { [Function: HarmonyImportSideEffectDependency]
       [length]: 4,
       [prototype]:
        HarmonyImportSideEffectDependency {
          [constructor]: [Circular],
          [getReference]:
           { [Function: getReference] [length]: 0, [name]: 'getReference' },
          [type]: [Getter] },
       [name]: 'HarmonyImportSideEffectDependency',
       Template:
        { [Function: HarmonyImportSideEffectDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyImportSideEffectDependencyTemplate {
             [constructor]: [Circular],
             [getHarmonyInitOrder]:
              { [Function: getHarmonyInitOrder] [length]: 1, [name]: 'getHarmonyInitOrder' } },
          [name]: 'HarmonyImportSideEffectDependencyTemplate' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: HarmonyImportSpecifierDependency]
       [length]: 8,
       [prototype]:
        HarmonyImportSpecifierDependency {
          [constructor]: [Circular],
          [type]: [Getter],
          [_id]: [Getter],
          [getReference]:
           { [Function: getReference] [length]: 0, [name]: 'getReference' },
          [getWarnings]:
           { [Function: getWarnings] [length]: 0, [name]: 'getWarnings' },
          [getErrors]: { [Function: getErrors] [length]: 0, [name]: 'getErrors' },
          [_getErrors]: { [Function: _getErrors] [length]: 0, [name]: '_getErrors' },
          [getNumberOfIdOccurrences]:
           { [Function: getNumberOfIdOccurrences] [length]: 0, [name]: 'getNumberOfIdOccurrences' },
          [updateHash]: { [Function: updateHash] [length]: 1, [name]: 'updateHash' },
          [disconnect]: { [Function: disconnect] [length]: 0, [name]: 'disconnect' } },
       [name]: 'HarmonyImportSpecifierDependency',
       Template:
        { [Function: HarmonyImportSpecifierDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyImportSpecifierDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' },
             [getContent]: { [Function: getContent] [length]: 2, [name]: 'getContent' } },
          [name]: 'HarmonyImportSpecifierDependencyTemplate' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: HarmonyExportHeaderDependency]
       [length]: 2,
       [prototype]:
        HarmonyExportHeaderDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'HarmonyExportHeaderDependency',
       Template:
        { [Function: HarmonyExportDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyExportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' } },
          [name]: 'HarmonyExportDependencyTemplate' } } => NullFactory {},
     { [Function: HarmonyExportExpressionDependency]
       [length]: 4,
       [prototype]:
        HarmonyExportExpressionDependency {
          [constructor]: [Circular],
          [type]: [Getter],
          [getExports]: { [Function: getExports] [length]: 0, [name]: 'getExports' } },
       [name]: 'HarmonyExportExpressionDependency',
       Template:
        { [Function: HarmonyExportDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyExportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' },
             [getContent]: { [Function: getContent] [length]: 2, [name]: 'getContent' } },
          [name]: 'HarmonyExportDependencyTemplate' } } => NullFactory {},
     { [Function: HarmonyExportSpecifierDependency]
       [length]: 3,
       [prototype]:
        HarmonyExportSpecifierDependency {
          [constructor]: [Circular],
          [type]: [Getter],
          [getExports]: { [Function: getExports] [length]: 0, [name]: 'getExports' } },
       [name]: 'HarmonyExportSpecifierDependency',
       Template:
        { [Function: HarmonyExportSpecifierDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyExportSpecifierDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' },
             [getHarmonyInitOrder]:
              { [Function: getHarmonyInitOrder] [length]: 1, [name]: 'getHarmonyInitOrder' },
             [harmonyInit]:
              { [Function: harmonyInit] [length]: 3, [name]: 'harmonyInit' },
             [getContent]: { [Function: getContent] [length]: 1, [name]: 'getContent' } },
          [name]: 'HarmonyExportSpecifierDependencyTemplate' } } => NullFactory {},
     { [Function: HarmonyExportImportedSpecifierDependency]
       [length]: 9,
       [prototype]:
        HarmonyExportImportedSpecifierDependency {
          [constructor]: [Circular],
          [type]: [Getter],
          [_id]: [Getter],
          [getMode]: { [Function: getMode] [length]: 1, [name]: 'getMode' },
          [getReference]:
           { [Function: getReference] [length]: 0, [name]: 'getReference' },
          [_discoverActiveExportsFromOtherStartExports]:
           { [Function: _discoverActiveExportsFromOtherStartExports]
             [length]: 0,
             [name]: '_discoverActiveExportsFromOtherStartExports' },
          [getExports]: { [Function: getExports] [length]: 0, [name]: 'getExports' },
          [getWarnings]:
           { [Function: getWarnings] [length]: 0, [name]: 'getWarnings' },
          [getErrors]: { [Function: getErrors] [length]: 0, [name]: 'getErrors' },
          [_getErrors]: { [Function: _getErrors] [length]: 0, [name]: '_getErrors' },
          [updateHash]: { [Function: updateHash] [length]: 1, [name]: 'updateHash' },
          [getHashValue]:
           { [Function: getHashValue] [length]: 1, [name]: 'getHashValue' },
          [disconnect]: { [Function: disconnect] [length]: 0, [name]: 'disconnect' } },
       [name]: 'HarmonyExportImportedSpecifierDependency',
       Template:
        { [Function: HarmonyExportImportedSpecifierDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyExportImportedSpecifierDependencyTemplate {
             [constructor]: [Circular],
             [harmonyInit]:
              { [Function: harmonyInit] [length]: 4, [name]: 'harmonyInit' },
             [getHarmonyInitOrder]:
              { [Function: getHarmonyInitOrder] [length]: 1, [name]: 'getHarmonyInitOrder' },
             [getContent]: { [Function: getContent] [length]: 1, [name]: 'getContent' },
             [getReexportStatement]:
              { [Function: getReexportStatement] [length]: 4, [name]: 'getReexportStatement' },
             [getReexportFakeNamespaceObjectStatement]:
              { [Function: getReexportFakeNamespaceObjectStatement]
                [length]: 3,
                [name]: 'getReexportFakeNamespaceObjectStatement' },
             [getConditionalReexportStatement]:
              { [Function: getConditionalReexportStatement] [length]: 4, [name]: 'getConditionalReexportStatement' },
             [getReturnValue]:
              { [Function: getReturnValue] [length]: 2, [name]: 'getReturnValue' } },
          [name]: 'HarmonyExportImportedSpecifierDependencyTemplate' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: HarmonyAcceptDependency]
       [length]: 3,
       [prototype]:
        HarmonyAcceptDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'HarmonyAcceptDependency',
       Template:
        { [Function: HarmonyAcceptDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyAcceptDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'HarmonyAcceptDependencyTemplate' } } => NullFactory {},
     { [Function: HarmonyAcceptImportDependency]
       [length]: 3,
       [prototype]:
        HarmonyAcceptImportDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'HarmonyAcceptImportDependency',
       Template:
        { [Function: HarmonyAcceptImportDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyAcceptImportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'HarmonyAcceptImportDependencyTemplate' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: AMDRequireDependency]
       [length]: 1,
       [prototype]: AMDRequireDependency { [constructor]: [Circular] },
       [name]: 'AMDRequireDependency',
       Template:
        { [Function: AMDRequireDependencyTemplate]
          [length]: 0,
          [prototype]:
           AMDRequireDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'AMDRequireDependencyTemplate' } } => NullFactory {},
     { [Function: AMDRequireItemDependency]
       [length]: 2,
       [prototype]:
        AMDRequireItemDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'AMDRequireItemDependency',
       Template:
        { [Function: ModuleDependencyTemplateAsRequireId]
          [length]: 0,
          [prototype]:
           ModuleDependencyTemplateAsRequireId {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ModuleDependencyTemplateAsRequireId' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: AMDRequireArrayDependency]
       [length]: 2,
       [prototype]:
        AMDRequireArrayDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'AMDRequireArrayDependency',
       Template:
        { [Function: AMDRequireArrayDependencyTemplate]
          [length]: 0,
          [prototype]:
           AMDRequireArrayDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' },
             [getContent]: { [Function: getContent] [length]: 2, [name]: 'getContent' },
             [contentForDependency]:
              { [Function: contentForDependency] [length]: 2, [name]: 'contentForDependency' } },
          [name]: 'AMDRequireArrayDependencyTemplate' } } => NullFactory {},
     { [Function: AMDRequireContextDependency]
       [length]: 3,
       [prototype]:
        AMDRequireContextDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'AMDRequireContextDependency',
       Template:
        { [Function: ContextDependencyTemplateAsRequireCall]
          [length]: 0,
          [prototype]:
           ContextDependencyTemplateAsRequireCall {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ContextDependencyTemplateAsRequireCall' } } => ContextModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'ContextModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          contextModuleFiles:
           SyncWaterfallHook {
             _args: [ 'files', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          alternatives:
           AsyncSeriesWaterfallHook {
             _args: [ 'modules', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} } },
     { [Function: AMDDefineDependency]
       [length]: 5,
       [prototype]:
        AMDDefineDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'AMDDefineDependency',
       Template:
        { [Function: AMDDefineDependencyTemplate]
          [length]: 0,
          [prototype]:
           AMDDefineDependencyTemplate {
             [constructor]: [Circular],
             [definitions]: [Getter],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' },
             [localModuleVar]:
              { [Function: localModuleVar] [length]: 1, [name]: 'localModuleVar' },
             [branch]: { [Function: branch] [length]: 1, [name]: 'branch' },
             [replace]: { [Function: replace] [length]: 4, [name]: 'replace' } },
          [name]: 'AMDDefineDependencyTemplate' } } => NullFactory {},
     { [Function: UnsupportedDependency]
       [length]: 2,
       [prototype]: UnsupportedDependency { [constructor]: [Circular] },
       [name]: 'UnsupportedDependency',
       Template:
        { [Function: UnsupportedDependencyTemplate]
          [length]: 0,
          [prototype]:
           UnsupportedDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'UnsupportedDependencyTemplate' } } => NullFactory {},
     { [Function: LocalModuleDependency]
       [length]: 3,
       [prototype]: LocalModuleDependency { [constructor]: [Circular] },
       [name]: 'LocalModuleDependency',
       Template:
        { [Function: LocalModuleDependencyTemplate]
          [length]: 0,
          [prototype]:
           LocalModuleDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' } },
          [name]: 'LocalModuleDependencyTemplate' } } => NullFactory {},
     { [Function: CommonJsRequireDependency]
       [length]: 2,
       [prototype]:
        CommonJsRequireDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'CommonJsRequireDependency',
       Template:
        { [Function: ModuleDependencyTemplateAsId]
          [length]: 0,
          [prototype]:
           ModuleDependencyTemplateAsId {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ModuleDependencyTemplateAsId' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: CommonJsRequireContextDependency]
       [length]: 3,
       [prototype]:
        CommonJsRequireContextDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'CommonJsRequireContextDependency',
       Template:
        { [Function: ContextDependencyTemplateAsRequireCall]
          [length]: 0,
          [prototype]:
           ContextDependencyTemplateAsRequireCall {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ContextDependencyTemplateAsRequireCall' } } => ContextModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'ContextModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          contextModuleFiles:
           SyncWaterfallHook {
             _args: [ 'files', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          alternatives:
           AsyncSeriesWaterfallHook {
             _args: [ 'modules', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} } },
     { [Function: RequireResolveDependency]
       [length]: 2,
       [prototype]:
        RequireResolveDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'RequireResolveDependency',
       Template:
        { [Function: ModuleDependencyTemplateAsId]
          [length]: 0,
          [prototype]:
           ModuleDependencyTemplateAsId {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ModuleDependencyTemplateAsId' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: RequireResolveContextDependency]
       [length]: 3,
       [prototype]:
        RequireResolveContextDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'RequireResolveContextDependency',
       Template:
        { [Function: ContextDependencyTemplateAsId]
          [length]: 0,
          [prototype]:
           ContextDependencyTemplateAsId {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ContextDependencyTemplateAsId' } } => ContextModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'ContextModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          contextModuleFiles:
           SyncWaterfallHook {
             _args: [ 'files', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          alternatives:
           AsyncSeriesWaterfallHook {
             _args: [ 'modules', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} } },
     { [Function: RequireResolveHeaderDependency]
       [length]: 1,
       [prototype]: RequireResolveHeaderDependency { [constructor]: [Circular] },
       [name]: 'RequireResolveHeaderDependency',
       Template:
        { [Function: RequireResolveHeaderDependencyTemplate]
          [length]: 0,
          [prototype]:
           RequireResolveHeaderDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' },
             [applyAsTemplateArgument]:
              { [Function: applyAsTemplateArgument] [length]: 3, [name]: 'applyAsTemplateArgument' } },
          [name]: 'RequireResolveHeaderDependencyTemplate' } } => NullFactory {},
     { [Function: RequireHeaderDependency]
       [length]: 1,
       [prototype]: RequireHeaderDependency { [constructor]: [Circular] },
       [name]: 'RequireHeaderDependency',
       Template:
        { [Function: RequireHeaderDependencyTemplate]
          [length]: 0,
          [prototype]:
           RequireHeaderDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' },
             [applyAsTemplateArgument]:
              { [Function: applyAsTemplateArgument] [length]: 3, [name]: 'applyAsTemplateArgument' } },
          [name]: 'RequireHeaderDependencyTemplate' } } => NullFactory {},
     { [Function: LoaderDependency]
       [length]: 1,
       [prototype]:
        LoaderDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'LoaderDependency' } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: RequireIncludeDependency]
       [length]: 2,
       [prototype]:
        RequireIncludeDependency {
          [constructor]: [Circular],
          [getReference]:
           { [Function: getReference] [length]: 0, [name]: 'getReference' },
          [type]: [Getter] },
       [name]: 'RequireIncludeDependency',
       Template:
        { [Function: RequireIncludeDependencyTemplate]
          [length]: 0,
          [prototype]:
           RequireIncludeDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'RequireIncludeDependencyTemplate' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: RequireEnsureItemDependency]
       [length]: 1,
       [prototype]:
        RequireEnsureItemDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'RequireEnsureItemDependency',
       Template:
        { [Function: NullDependencyTemplate]
          [length]: 0,
          [prototype]:
           NullDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 0, [name]: 'apply' } },
          [name]: 'NullDependencyTemplate' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: RequireEnsureDependency]
       [length]: 1,
       [prototype]:
        RequireEnsureDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'RequireEnsureDependency',
       Template:
        { [Function: RequireEnsureDependencyTemplate]
          [length]: 0,
          [prototype]:
           RequireEnsureDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'RequireEnsureDependencyTemplate' } } => NullFactory {},
     { [Function: RequireContextDependency]
       [length]: 2,
       [prototype]:
        RequireContextDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'RequireContextDependency',
       Template:
        { [Function: ModuleDependencyTemplateAsRequireId]
          [length]: 0,
          [prototype]:
           ModuleDependencyTemplateAsRequireId {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ModuleDependencyTemplateAsRequireId' } } => ContextModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'ContextModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          contextModuleFiles:
           SyncWaterfallHook {
             _args: [ 'files', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          alternatives:
           AsyncSeriesWaterfallHook {
             _args: [ 'modules', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} } },
     { [Function: ContextElementDependency]
       [length]: 2,
       [prototype]:
        ContextElementDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'ContextElementDependency' } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: ImportDependency]
       [length]: 3,
       [prototype]:
        ImportDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'ImportDependency',
       Template:
        { [Function: ImportDependencyTemplate]
          [length]: 0,
          [prototype]:
           ImportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ImportDependencyTemplate' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: ImportEagerDependency]
       [length]: 3,
       [prototype]:
        ImportEagerDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'ImportEagerDependency',
       Template:
        { [Function: ImportEagerDependencyTemplate]
          [length]: 0,
          [prototype]:
           ImportEagerDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ImportEagerDependencyTemplate' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: ImportWeakDependency]
       [length]: 3,
       [prototype]:
        ImportWeakDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'ImportWeakDependency',
       Template:
        { [Function: ImportDependencyTemplate]
          [length]: 0,
          [prototype]:
           ImportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ImportDependencyTemplate' } } => NormalModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'NormalModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { resolver:
           SyncWaterfallHook {
             _args: [ 'resolver', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                [length]: 1 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          factory:
           SyncWaterfallHook {
             _args: [ 'factory', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 0, [name]: '' },
                  name: 'NormalModuleFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ExternalModuleFactoryPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createModule:
           SyncBailHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          module:
           SyncWaterfallHook {
             _args: [ 'module', 'data', [length]: 2 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 2, [name]: '' },
                  name: 'SideEffectsFlagPlugin' },
                [length]: 2 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          createParser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 1, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'parserOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          parser:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function] [length]: 2, [name]: '' },
                       name: 'CompatibilityPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 19 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeSourcePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'AMDPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'NodeStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'CommonJsStuffPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireIncludePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireEnsurePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'RequireContextPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'SystemPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 17 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncHook {
                  _args: [ 'parser', 'parserOptions', [length]: 2 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'HarmonyModulesPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'APIPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'ConstPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'UseStrictPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ImportPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 2, [name]: 'handler' },
                       name: 'ModuleConcatenationPlugin' },
                     { type: 'sync',
                       fn: { [Function: handler] [length]: 1, [name]: 'handler' },
                       name: 'DefinePlugin' },
                     [length]: 8 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 3 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          createGenerator:
           HookMap {
             _map:
              Map {
                'javascript/auto' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/dynamic' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'javascript/esm' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JavascriptModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'json' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'JsonModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                'webassembly/experimental' => SyncBailHook {
                  _args: [ 'generatorOptions', [length]: 1 ],
                  taps:
                   [ { type: 'sync',
                       fn: { [Function] [length]: 0, [name]: '' },
                       name: 'WebAssemblyModulesPlugin' },
                     [length]: 1 ],
                  interceptors: [ [length]: 0 ],
                  call:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  promise:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  callAsync:
                   { [Function: lazyCompileHook]
                     [length]: 0,
                     [name]: 'lazyCompileHook',
                     [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                  _x: undefined },
                [size]: 5 },
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] },
          generator:
           HookMap {
             _map: Map {},
             _factory: { [Function] [length]: 0, [name]: '' },
             _interceptors: [ [length]: 0 ] } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} },
       ruleSet:
        RuleSet {
          references:
           [Object: null prototype] {
             'ref--4-0':
              { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                sourceMaps: true,
                presets: [ '@babel/preset-env', [length]: 1 ] },
             'ref--4-1':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                autoChunk: true,
                sortFunction: undefined },
             'ref--5':
              { eslintPath:
                 '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                fix: true },
             'ref--6-0': { omit: 1, remove: true },
             'ref--6-2': { importLoaders: 1, sourceMap: true },
             postcss:
              { ident: 'postcss',
                plugins:
                 [ { [Function: creator]
                     [length]: 0,
                     [name]: 'creator',
                     [prototype]: creator { [constructor]: [Circular] },
                     [postcss]: [Getter],
                     process:
                      { [Function]
                        [length]: 3,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } },
                     data:
                      { browsers:
                         { ie:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE',
                              release_date: [Object] },
                           edge:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Edge',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           firefox:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox',
                              release_date: [Object] },
                           chrome:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome',
                              release_date: [Object] },
                           safari:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Safari',
                              release_date: [Object] },
                           opera:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Opera',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           ios_saf:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'iOS Safari',
                              release_date: [Object] },
                           op_mini:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mini',
                              release_date: [Object] },
                           android:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Android Browser',
                              release_date: [Object] },
                           bb:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Blackberry Browser',
                              release_date: [Object] },
                           op_mob:
                            { usage_global: [Object],
                              prefix: 'o',
                              versions: [Array],
                              browser: 'Opera Mobile',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           and_chr:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Chrome for Android',
                              release_date: [Object] },
                           and_ff:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'Firefox for Android',
                              release_date: [Object] },
                           ie_mob:
                            { usage_global: [Object],
                              prefix: 'ms',
                              versions: [Array],
                              browser: 'IE Mobile',
                              release_date: [Object] },
                           and_uc:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'UC Browser for Android',
                              release_date: [Object],
                              prefix_exceptions: [Object] },
                           samsung:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Samsung Internet',
                              release_date: [Object] },
                           and_qq:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'QQ Browser',
                              release_date: [Object] },
                           baidu:
                            { usage_global: [Object],
                              prefix: 'webkit',
                              versions: [Array],
                              browser: 'Baidu Browser',
                              release_date: [Object] },
                           kaios:
                            { usage_global: [Object],
                              prefix: 'moz',
                              versions: [Array],
                              browser: 'KaiOS Browser',
                              release_date: [Object] } },
                        prefixes:
                         { 'border-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-top-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-right-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'border-bottom-left-radius':
                            { mistakes: [Array],
                              feature: 'border-radius',
                              browsers: [Array] },
                           'box-shadow':
                            { mistakes: [Array],
                              feature: 'css-boxshadow',
                              browsers: [Array] },
                           animation:
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-name':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-duration':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-delay':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-direction':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-fill-mode':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-iteration-count':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-play-state':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           'animation-timing-function':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           '@keyframes':
                            { mistakes: [Array],
                              feature: 'css-animation',
                              browsers: [Array] },
                           transition:
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-property':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-duration':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-delay':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           'transition-timing-function':
                            { mistakes: [Array],
                              browsers: [Array],
                              feature: 'css-transitions' },
                           transform: { feature: 'transforms2d', browsers: [Array] },
                           'transform-origin': { feature: 'transforms2d', browsers: [Array] },
                           perspective: { feature: 'transforms3d', browsers: [Array] },
                           'perspective-origin': { feature: 'transforms3d', browsers: [Array] },
                           'transform-style':
                            { mistakes: [Array], browsers: [Array], feature: 'transforms3d' },
                           'backface-visibility':
                            { mistakes: [Array], feature: 'transforms3d', browsers: [Array] },
                           'linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-linear-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'repeating-radial-gradient':
                            { props: [Array],
                              mistakes: [Array],
                              feature: 'css-gradients',
                              browsers: [Array] },
                           'box-sizing': { feature: 'css3-boxsizing', browsers: [Array] },
                           filter: { feature: 'css-filters', browsers: [Array] },
                           'filter-function':
                            { props: [Array],
                              feature: 'css-filter-function',
                              browsers: [Array] },
                           'backdrop-filter': { feature: 'css-backdrop-filter', browsers: [Array] },
                           element:
                            { props: [Array],
                              feature: 'css-element-function',
                              browsers: [Array] },
                           columns: { feature: 'multicolumn', browsers: [Array] },
                           'column-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-gap': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-color': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-width': { feature: 'multicolumn', browsers: [Array] },
                           'column-count': { feature: 'multicolumn', browsers: [Array] },
                           'column-rule-style': { feature: 'multicolumn', browsers: [Array] },
                           'column-span': { feature: 'multicolumn', browsers: [Array] },
                           'column-fill': { feature: 'multicolumn', browsers: [Array] },
                           'break-before': { feature: 'multicolumn', browsers: [Array] },
                           'break-after': { feature: 'multicolumn', browsers: [Array] },
                           'break-inside': { feature: 'multicolumn', browsers: [Array] },
                           'user-select':
                            { mistakes: [Array],
                              feature: 'user-select-none',
                              browsers: [Array] },
                           'display-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           'inline-flex': { props: [Array], feature: 'flexbox', browsers: [Array] },
                           flex: { feature: 'flexbox', browsers: [Array] },
                           'flex-grow': { feature: 'flexbox', browsers: [Array] },
                           'flex-shrink': { feature: 'flexbox', browsers: [Array] },
                           'flex-basis': { feature: 'flexbox', browsers: [Array] },
                           'flex-direction': { feature: 'flexbox', browsers: [Array] },
                           'flex-wrap': { feature: 'flexbox', browsers: [Array] },
                           'flex-flow': { feature: 'flexbox', browsers: [Array] },
                           'justify-content': { feature: 'flexbox', browsers: [Array] },
                           order: { feature: 'flexbox', browsers: [Array] },
                           'align-items': { feature: 'flexbox', browsers: [Array] },
                           'align-self': { feature: 'flexbox', browsers: [Array] },
                           'align-content': { feature: 'flexbox', browsers: [Array] },
                           calc: { props: [Array], feature: 'calc', browsers: [Array] },
                           'background-origin': { feature: 'background-img-opts', browsers: [Array] },
                           'background-size': { feature: 'background-img-opts', browsers: [Array] },
                           'background-clip': { feature: 'background-clip-text', browsers: [Array] },
                           'font-feature-settings': { feature: 'font-feature', browsers: [Array] },
                           'font-variant-ligatures': { feature: 'font-feature', browsers: [Array] },
                           'font-language-override': { feature: 'font-feature', browsers: [Array] },
                           'font-kerning': { feature: 'font-kerning', browsers: [Array] },
                           'border-image': { feature: 'border-image', browsers: [Array] },
                           '::selection':
                            { selector: true, feature: 'css-selection', browsers: [Array] },
                           '::placeholder':
                            { selector: true, feature: 'css-placeholder', browsers: [Array] },
                           hyphens: { feature: 'css-hyphens', browsers: [Array] },
                           ':fullscreen': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           '::backdrop': { selector: true, feature: 'fullscreen', browsers: [Array] },
                           'tab-size': { feature: 'css3-tabsize', browsers: [Array] },
                           'max-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'min-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           fill:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fill-available':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           stretch:
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'fit-content':
                            { props: [Array], feature: 'intrinsic-width', browsers: [Array] },
                           'zoom-in':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           'zoom-out':
                            { props: [Array],
                              feature: 'css3-cursors-newer',
                              browsers: [Array] },
                           grab:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           grabbing:
                            { props: [Array],
                              feature: 'css3-cursors-grab',
                              browsers: [Array] },
                           sticky: { props: [Array], feature: 'css-sticky', browsers: [Array] },
                           'touch-action': { feature: 'pointer', browsers: [Array] },
                           'text-decoration-style': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-color': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-line': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip': { feature: 'text-decoration', browsers: [Array] },
                           'text-decoration-skip-ink': { feature: 'text-decoration', browsers: [Array] },
                           'text-size-adjust': { feature: 'text-size-adjust', browsers: [Array] },
                           'mask-clip': { feature: 'css-masks', browsers: [Array] },
                           'mask-composite': { feature: 'css-masks', browsers: [Array] },
                           'mask-image': { feature: 'css-masks', browsers: [Array] },
                           'mask-origin': { feature: 'css-masks', browsers: [Array] },
                           'mask-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-repeat': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-source': { feature: 'css-masks', browsers: [Array] },
                           mask: { feature: 'css-masks', browsers: [Array] },
                           'mask-position': { feature: 'css-masks', browsers: [Array] },
                           'mask-size': { feature: 'css-masks', browsers: [Array] },
                           'mask-border': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-outset': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-width': { feature: 'css-masks', browsers: [Array] },
                           'mask-border-slice': { feature: 'css-masks', browsers: [Array] },
                           'clip-path': { feature: 'css-clip-path', browsers: [Array] },
                           'box-decoration-break': { feature: 'css-boxdecorationbreak', browsers: [Array] },
                           'object-fit': { feature: 'object-fit', browsers: [Array] },
                           'object-position': { feature: 'object-fit', browsers: [Array] },
                           'shape-margin': { feature: 'css-shapes', browsers: [Array] },
                           'shape-outside': { feature: 'css-shapes', browsers: [Array] },
                           'shape-image-threshold': { feature: 'css-shapes', browsers: [Array] },
                           'text-overflow': { feature: 'text-overflow', browsers: [Array] },
                           '@viewport': { feature: 'css-deviceadaptation', browsers: [Array] },
                           '@resolution': { feature: 'css-media-resolution', browsers: [Array] },
                           'text-align-last': { feature: 'css-text-align-last', browsers: [Array] },
                           pixelated:
                            { props: [Array], feature: 'css-crisp-edges', browsers: [Array] },
                           'image-rendering': { feature: 'css-crisp-edges', browsers: [Array] },
                           'border-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-inline-end': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'border-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'margin-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-start': { feature: 'css-logical-props', browsers: [Array] },
                           'padding-block-end': { feature: 'css-logical-props', browsers: [Array] },
                           appearance: { feature: 'css-appearance', browsers: [Array] },
                           'scroll-snap-type': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-coordinate': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-destination': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-x': { feature: 'css-snappoints', browsers: [Array] },
                           'scroll-snap-points-y': { feature: 'css-snappoints', browsers: [Array] },
                           'flow-into': { feature: 'css-regions', browsers: [Array] },
                           'flow-from': { feature: 'css-regions', browsers: [Array] },
                           'region-fragment': { feature: 'css-regions', browsers: [Array] },
                           'image-set':
                            { props: [Array], feature: 'css-image-set', browsers: [Array] },
                           'writing-mode': { feature: 'css-writing-mode', browsers: [Array] },
                           'cross-fade':
                            { props: [Array], feature: 'css-cross-fade', browsers: [Array] },
                           ':read-only':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           ':read-write':
                            { selector: true,
                              feature: 'css-read-only-write',
                              browsers: [Array] },
                           'text-emphasis': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-position': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-style': { feature: 'text-emphasis', browsers: [Array] },
                           'text-emphasis-color': { feature: 'text-emphasis', browsers: [Array] },
                           'display-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'inline-grid': { props: [Array], feature: 'css-grid', browsers: [Array] },
                           'grid-template-columns': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-rows': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-start': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-end': { feature: 'css-grid', browsers: [Array] },
                           'grid-row': { feature: 'css-grid', browsers: [Array] },
                           'grid-column': { feature: 'css-grid', browsers: [Array] },
                           'grid-area': { feature: 'css-grid', browsers: [Array] },
                           'grid-template': { feature: 'css-grid', browsers: [Array] },
                           'grid-template-areas': { feature: 'css-grid', browsers: [Array] },
                           'place-self': { feature: 'css-grid', browsers: [Array] },
                           'grid-column-align': { feature: 'css-grid', browsers: [Array] },
                           'grid-row-align': { feature: 'css-grid', browsers: [Array] },
                           'text-spacing': { feature: 'css-text-spacing', browsers: [Array] },
                           ':any-link':
                            { selector: true, feature: 'css-any-link', browsers: [Array] },
                           isolate:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           plaintext:
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'isolate-override':
                            { props: [Array],
                              feature: 'css-unicode-bidi',
                              browsers: [Array] },
                           'overscroll-behavior': { feature: 'css-overscroll-behavior', browsers: [Array] },
                           'color-adjust': { feature: 'css-color-adjust', browsers: [Array] },
                           'text-orientation': { feature: 'css-text-orientation', browsers: [Array] } } },
                     defaults:
                      [ '> 0.5%',
                        'last 2 versions',
                        'Firefox ESR',
                        'not dead',
                        [length]: 4 ],
                     info:
                      { [Function]
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular] } } },
                   [length]: 1 ] },
             'ref--6-4': { sourceMap: true },
             'ref--6-5':
              { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                sortFunction: undefined } },
          rules:
           [ { type: 'javascript/auto', resolve: {} },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'javascript/esm',
               resolve: { mainFields: [ 'browser', 'main', [length]: 2 ] } },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'json' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               type: 'webassembly/experimental' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options:
                     { plugins: [ '@babel/plugin-proposal-object-rest-spread', [length]: 1 ],
                       sourceMaps: true,
                       presets: [ '@babel/preset-env', [length]: 1 ] },
                    ident: 'ref--4-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/babel-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       autoChunk: true,
                       sortFunction: undefined },
                    ident: 'ref--4-1',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 2 ] },
             { resource: { [Function] [length]: 1, [name]: '' },
               use:
                [ { options:
                     { eslintPath:
                        '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint',
                       fix: true },
                    ident: 'ref--5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/eslint-loader' },
                  [length]: 1 ],
               enforce: 'pre' },
             { resource: { [Function: bound test] [length]: 1, [name]: 'bound test' },
               use:
                [ { options: { omit: 1, remove: true },
                    ident: 'ref--6-0',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/extract-text-webpack-plugin/dist/loader.js' },
                  { options: undefined,
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/style-loader' },
                  { options: { importLoaders: 1, sourceMap: true },
                    ident: 'ref--6-2',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/css-loader' },
                  { options:
                     { ident: 'postcss',
                       plugins:
                        [ { [Function: creator]
                            [length]: 0,
                            [name]: 'creator',
                            [prototype]: [creator],
                            [postcss]: [Getter],
                            process: [Function],
                            data: [Object],
                            defaults: [Array],
                            info: [Function] },
                          [length]: 1 ] },
                    ident: 'postcss',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/postcss-loader' },
                  { options: { sourceMap: true },
                    ident: 'ref--6-4',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/sass-loader' },
                  { options:
                     { 'path.src': '/Users/max/Sites/ratio-et-motus/src',
                       sortFunction: undefined },
                    ident: 'ref--6-5',
                    loader:
                     '/Users/max/Sites/@halfhelix:kit/packages/webpacker/node_modules/@halfhelix/glob-loader' },
                  [length]: 6 ] },
             [length]: 7 ] },
       cachePredicate:
        { [Function: bound Boolean] [length]: 0, [name]: 'bound Boolean' },
       context: '/Users/max/Sites/ratio-et-motus',
       parserCache: [Object: null prototype] {},
       generatorCache: [Object: null prototype] {} },
     { [Function: ImportContextDependency]
       [length]: 3,
       [prototype]:
        ImportContextDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'ImportContextDependency',
       Template:
        { [Function: ContextDependencyTemplateAsRequireCall]
          [length]: 0,
          [prototype]:
           ContextDependencyTemplateAsRequireCall {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ContextDependencyTemplateAsRequireCall' } } => ContextModuleFactory {
       _pluginCompat:
        SyncBailHook {
          _args: [ 'options', [length]: 1 ],
          taps:
           [ { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'ContextModuleFactory' },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable camelCase',
               stage: 100 },
             { type: 'sync',
               fn: { [Function] [length]: 1, [name]: '' },
               name: 'Tapable this.hooks',
               stage: 200 },
             [length]: 3 ],
          interceptors: [ [length]: 0 ],
          call:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          promise:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          callAsync:
           { [Function: lazyCompileHook]
             [length]: 0,
             [name]: 'lazyCompileHook',
             [prototype]: lazyCompileHook { [constructor]: [Circular] } },
          _x: undefined },
       hooks:
        { beforeResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          afterResolve:
           AsyncSeriesWaterfallHook {
             _args: [ 'data', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          contextModuleFiles:
           SyncWaterfallHook {
             _args: [ 'files', [length]: 1 ],
             taps: [ [length]: 0 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          alternatives:
           AsyncSeriesWaterfallHook {
             _args: [ 'modules', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'RequireContextPlugin' },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call: undefined,
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined } },
       resolverFactory:
        ResolverFactory {
          _pluginCompat:
           SyncBailHook {
             _args: [ 'options', [length]: 1 ],
             taps:
              [ { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'ResolverFactory' },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable camelCase',
                  stage: 100 },
                { type: 'sync',
                  fn: { [Function] [length]: 1, [name]: '' },
                  name: 'Tapable this.hooks',
                  stage: 200 },
                [length]: 3 ],
             interceptors: [ [length]: 0 ],
             call:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             promise:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             callAsync:
              { [Function: lazyCompileHook]
                [length]: 0,
                [name]: 'lazyCompileHook',
                [prototype]: lazyCompileHook { [constructor]: [Circular] } },
             _x: undefined },
          hooks:
           { resolveOptions:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'context' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   'loader' => SyncWaterfallHook {
                     _args: [ 'resolveOptions', [length]: 1 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'WebpackOptionsApply' },
                        [length]: 1 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 3 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] },
             resolver:
              HookMap {
                _map:
                 Map {
                   'normal' => SyncHook {
                     _args: [ 'resolver', 'resolveOptions', [length]: 2 ],
                     taps:
                      [ { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'NodeSourcePlugin' },
                        { type: 'sync',
                          fn: { [Function] [length]: 1, [name]: '' },
                          name: 'AMDPlugin' },
                        [length]: 38 ],
                     interceptors: [ [length]: 0 ],
                     call:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     promise:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     callAsync:
                      { [Function: lazyCompileHook]
                        [length]: 0,
                        [name]: 'lazyCompileHook',
                        [prototype]: lazyCompileHook { [constructor]: [Circular] } },
                     _x: undefined },
                   [size]: 1 },
                _factory: { [Function] [length]: 0, [name]: '' },
                _interceptors: [ [length]: 0 ] } },
          cache2: Map {} } },
     [size]: 38 },
  dependencyTemplates:
   Map {
     'hash' => '',
     { [Function: ConstDependency]
       [length]: 3,
       [prototype]:
        ConstDependency {
          [constructor]: [Circular],
          [updateHash]: { [Function: updateHash] [length]: 1, [name]: 'updateHash' } },
       [name]: 'ConstDependency',
       Template:
        { [Function: ConstDependencyTemplate]
          [length]: 0,
          [prototype]:
           ConstDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' } },
          [name]: 'ConstDependencyTemplate' } } => ConstDependencyTemplate {},
     { [Function: HarmonyCompatibilityDependency]
       [length]: 1,
       [prototype]:
        HarmonyCompatibilityDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'HarmonyCompatibilityDependency',
       Template:
        { [Function: HarmonyExportDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyExportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'HarmonyExportDependencyTemplate' } } => HarmonyExportDependencyTemplate {},
     { [Function: HarmonyInitDependency]
       [length]: 1,
       [prototype]:
        HarmonyInitDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'HarmonyInitDependency',
       Template:
        { [Function: HarmonyInitDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyInitDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 4, [name]: 'apply' } },
          [name]: 'HarmonyInitDependencyTemplate' } } => HarmonyInitDependencyTemplate {},
     { [Function: HarmonyImportSideEffectDependency]
       [length]: 4,
       [prototype]:
        HarmonyImportSideEffectDependency {
          [constructor]: [Circular],
          [getReference]:
           { [Function: getReference] [length]: 0, [name]: 'getReference' },
          [type]: [Getter] },
       [name]: 'HarmonyImportSideEffectDependency',
       Template:
        { [Function: HarmonyImportSideEffectDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyImportSideEffectDependencyTemplate {
             [constructor]: [Circular],
             [getHarmonyInitOrder]:
              { [Function: getHarmonyInitOrder] [length]: 1, [name]: 'getHarmonyInitOrder' } },
          [name]: 'HarmonyImportSideEffectDependencyTemplate' } } => HarmonyImportSideEffectDependencyTemplate {},
     { [Function: HarmonyImportSpecifierDependency]
       [length]: 8,
       [prototype]:
        HarmonyImportSpecifierDependency {
          [constructor]: [Circular],
          [type]: [Getter],
          [_id]: [Getter],
          [getReference]:
           { [Function: getReference] [length]: 0, [name]: 'getReference' },
          [getWarnings]:
           { [Function: getWarnings] [length]: 0, [name]: 'getWarnings' },
          [getErrors]: { [Function: getErrors] [length]: 0, [name]: 'getErrors' },
          [_getErrors]: { [Function: _getErrors] [length]: 0, [name]: '_getErrors' },
          [getNumberOfIdOccurrences]:
           { [Function: getNumberOfIdOccurrences] [length]: 0, [name]: 'getNumberOfIdOccurrences' },
          [updateHash]: { [Function: updateHash] [length]: 1, [name]: 'updateHash' },
          [disconnect]: { [Function: disconnect] [length]: 0, [name]: 'disconnect' } },
       [name]: 'HarmonyImportSpecifierDependency',
       Template:
        { [Function: HarmonyImportSpecifierDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyImportSpecifierDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' },
             [getContent]: { [Function: getContent] [length]: 2, [name]: 'getContent' } },
          [name]: 'HarmonyImportSpecifierDependencyTemplate' } } => HarmonyImportSpecifierDependencyTemplate {},
     { [Function: HarmonyExportHeaderDependency]
       [length]: 2,
       [prototype]:
        HarmonyExportHeaderDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'HarmonyExportHeaderDependency',
       Template:
        { [Function: HarmonyExportDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyExportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' } },
          [name]: 'HarmonyExportDependencyTemplate' } } => HarmonyExportDependencyTemplate {},
     { [Function: HarmonyExportExpressionDependency]
       [length]: 4,
       [prototype]:
        HarmonyExportExpressionDependency {
          [constructor]: [Circular],
          [type]: [Getter],
          [getExports]: { [Function: getExports] [length]: 0, [name]: 'getExports' } },
       [name]: 'HarmonyExportExpressionDependency',
       Template:
        { [Function: HarmonyExportDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyExportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' },
             [getContent]: { [Function: getContent] [length]: 2, [name]: 'getContent' } },
          [name]: 'HarmonyExportDependencyTemplate' } } => HarmonyExportDependencyTemplate {},
     { [Function: HarmonyExportSpecifierDependency]
       [length]: 3,
       [prototype]:
        HarmonyExportSpecifierDependency {
          [constructor]: [Circular],
          [type]: [Getter],
          [getExports]: { [Function: getExports] [length]: 0, [name]: 'getExports' } },
       [name]: 'HarmonyExportSpecifierDependency',
       Template:
        { [Function: HarmonyExportSpecifierDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyExportSpecifierDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' },
             [getHarmonyInitOrder]:
              { [Function: getHarmonyInitOrder] [length]: 1, [name]: 'getHarmonyInitOrder' },
             [harmonyInit]:
              { [Function: harmonyInit] [length]: 3, [name]: 'harmonyInit' },
             [getContent]: { [Function: getContent] [length]: 1, [name]: 'getContent' } },
          [name]: 'HarmonyExportSpecifierDependencyTemplate' } } => HarmonyExportSpecifierDependencyTemplate {},
     { [Function: HarmonyExportImportedSpecifierDependency]
       [length]: 9,
       [prototype]:
        HarmonyExportImportedSpecifierDependency {
          [constructor]: [Circular],
          [type]: [Getter],
          [_id]: [Getter],
          [getMode]: { [Function: getMode] [length]: 1, [name]: 'getMode' },
          [getReference]:
           { [Function: getReference] [length]: 0, [name]: 'getReference' },
          [_discoverActiveExportsFromOtherStartExports]:
           { [Function: _discoverActiveExportsFromOtherStartExports]
             [length]: 0,
             [name]: '_discoverActiveExportsFromOtherStartExports' },
          [getExports]: { [Function: getExports] [length]: 0, [name]: 'getExports' },
          [getWarnings]:
           { [Function: getWarnings] [length]: 0, [name]: 'getWarnings' },
          [getErrors]: { [Function: getErrors] [length]: 0, [name]: 'getErrors' },
          [_getErrors]: { [Function: _getErrors] [length]: 0, [name]: '_getErrors' },
          [updateHash]: { [Function: updateHash] [length]: 1, [name]: 'updateHash' },
          [getHashValue]:
           { [Function: getHashValue] [length]: 1, [name]: 'getHashValue' },
          [disconnect]: { [Function: disconnect] [length]: 0, [name]: 'disconnect' } },
       [name]: 'HarmonyExportImportedSpecifierDependency',
       Template:
        { [Function: HarmonyExportImportedSpecifierDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyExportImportedSpecifierDependencyTemplate {
             [constructor]: [Circular],
             [harmonyInit]:
              { [Function: harmonyInit] [length]: 4, [name]: 'harmonyInit' },
             [getHarmonyInitOrder]:
              { [Function: getHarmonyInitOrder] [length]: 1, [name]: 'getHarmonyInitOrder' },
             [getContent]: { [Function: getContent] [length]: 1, [name]: 'getContent' },
             [getReexportStatement]:
              { [Function: getReexportStatement] [length]: 4, [name]: 'getReexportStatement' },
             [getReexportFakeNamespaceObjectStatement]:
              { [Function: getReexportFakeNamespaceObjectStatement]
                [length]: 3,
                [name]: 'getReexportFakeNamespaceObjectStatement' },
             [getConditionalReexportStatement]:
              { [Function: getConditionalReexportStatement] [length]: 4, [name]: 'getConditionalReexportStatement' },
             [getReturnValue]:
              { [Function: getReturnValue] [length]: 2, [name]: 'getReturnValue' } },
          [name]: 'HarmonyExportImportedSpecifierDependencyTemplate' } } => HarmonyExportImportedSpecifierDependencyTemplate {},
     { [Function: HarmonyAcceptDependency]
       [length]: 3,
       [prototype]:
        HarmonyAcceptDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'HarmonyAcceptDependency',
       Template:
        { [Function: HarmonyAcceptDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyAcceptDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'HarmonyAcceptDependencyTemplate' } } => HarmonyAcceptDependencyTemplate {},
     { [Function: HarmonyAcceptImportDependency]
       [length]: 3,
       [prototype]:
        HarmonyAcceptImportDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'HarmonyAcceptImportDependency',
       Template:
        { [Function: HarmonyAcceptImportDependencyTemplate]
          [length]: 0,
          [prototype]:
           HarmonyAcceptImportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'HarmonyAcceptImportDependencyTemplate' } } => HarmonyAcceptImportDependencyTemplate {},
     { [Function: AMDRequireDependency]
       [length]: 1,
       [prototype]: AMDRequireDependency { [constructor]: [Circular] },
       [name]: 'AMDRequireDependency',
       Template:
        { [Function: AMDRequireDependencyTemplate]
          [length]: 0,
          [prototype]:
           AMDRequireDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'AMDRequireDependencyTemplate' } } => AMDRequireDependencyTemplate {},
     { [Function: AMDRequireItemDependency]
       [length]: 2,
       [prototype]:
        AMDRequireItemDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'AMDRequireItemDependency',
       Template:
        { [Function: ModuleDependencyTemplateAsRequireId]
          [length]: 0,
          [prototype]:
           ModuleDependencyTemplateAsRequireId {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ModuleDependencyTemplateAsRequireId' } } => ModuleDependencyTemplateAsRequireId {},
     { [Function: AMDRequireArrayDependency]
       [length]: 2,
       [prototype]:
        AMDRequireArrayDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'AMDRequireArrayDependency',
       Template:
        { [Function: AMDRequireArrayDependencyTemplate]
          [length]: 0,
          [prototype]:
           AMDRequireArrayDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' },
             [getContent]: { [Function: getContent] [length]: 2, [name]: 'getContent' },
             [contentForDependency]:
              { [Function: contentForDependency] [length]: 2, [name]: 'contentForDependency' } },
          [name]: 'AMDRequireArrayDependencyTemplate' } } => AMDRequireArrayDependencyTemplate {},
     { [Function: AMDRequireContextDependency]
       [length]: 3,
       [prototype]:
        AMDRequireContextDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'AMDRequireContextDependency',
       Template:
        { [Function: ContextDependencyTemplateAsRequireCall]
          [length]: 0,
          [prototype]:
           ContextDependencyTemplateAsRequireCall {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ContextDependencyTemplateAsRequireCall' } } => ContextDependencyTemplateAsRequireCall {},
     { [Function: AMDDefineDependency]
       [length]: 5,
       [prototype]:
        AMDDefineDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'AMDDefineDependency',
       Template:
        { [Function: AMDDefineDependencyTemplate]
          [length]: 0,
          [prototype]:
           AMDDefineDependencyTemplate {
             [constructor]: [Circular],
             [definitions]: [Getter],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' },
             [localModuleVar]:
              { [Function: localModuleVar] [length]: 1, [name]: 'localModuleVar' },
             [branch]: { [Function: branch] [length]: 1, [name]: 'branch' },
             [replace]: { [Function: replace] [length]: 4, [name]: 'replace' } },
          [name]: 'AMDDefineDependencyTemplate' } } => AMDDefineDependencyTemplate {},
     { [Function: UnsupportedDependency]
       [length]: 2,
       [prototype]: UnsupportedDependency { [constructor]: [Circular] },
       [name]: 'UnsupportedDependency',
       Template:
        { [Function: UnsupportedDependencyTemplate]
          [length]: 0,
          [prototype]:
           UnsupportedDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'UnsupportedDependencyTemplate' } } => UnsupportedDependencyTemplate {},
     { [Function: LocalModuleDependency]
       [length]: 3,
       [prototype]: LocalModuleDependency { [constructor]: [Circular] },
       [name]: 'LocalModuleDependency',
       Template:
        { [Function: LocalModuleDependencyTemplate]
          [length]: 0,
          [prototype]:
           LocalModuleDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' } },
          [name]: 'LocalModuleDependencyTemplate' } } => LocalModuleDependencyTemplate {},
     { [Function: CommonJsRequireDependency]
       [length]: 2,
       [prototype]:
        CommonJsRequireDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'CommonJsRequireDependency',
       Template:
        { [Function: ModuleDependencyTemplateAsId]
          [length]: 0,
          [prototype]:
           ModuleDependencyTemplateAsId {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ModuleDependencyTemplateAsId' } } => ModuleDependencyTemplateAsId {},
     { [Function: CommonJsRequireContextDependency]
       [length]: 3,
       [prototype]:
        CommonJsRequireContextDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'CommonJsRequireContextDependency',
       Template:
        { [Function: ContextDependencyTemplateAsRequireCall]
          [length]: 0,
          [prototype]:
           ContextDependencyTemplateAsRequireCall {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ContextDependencyTemplateAsRequireCall' } } => ContextDependencyTemplateAsRequireCall {},
     { [Function: RequireResolveDependency]
       [length]: 2,
       [prototype]:
        RequireResolveDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'RequireResolveDependency',
       Template:
        { [Function: ModuleDependencyTemplateAsId]
          [length]: 0,
          [prototype]:
           ModuleDependencyTemplateAsId {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ModuleDependencyTemplateAsId' } } => ModuleDependencyTemplateAsId {},
     { [Function: RequireResolveContextDependency]
       [length]: 3,
       [prototype]:
        RequireResolveContextDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'RequireResolveContextDependency',
       Template:
        { [Function: ContextDependencyTemplateAsId]
          [length]: 0,
          [prototype]:
           ContextDependencyTemplateAsId {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ContextDependencyTemplateAsId' } } => ContextDependencyTemplateAsId {},
     { [Function: RequireResolveHeaderDependency]
       [length]: 1,
       [prototype]: RequireResolveHeaderDependency { [constructor]: [Circular] },
       [name]: 'RequireResolveHeaderDependency',
       Template:
        { [Function: RequireResolveHeaderDependencyTemplate]
          [length]: 0,
          [prototype]:
           RequireResolveHeaderDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' },
             [applyAsTemplateArgument]:
              { [Function: applyAsTemplateArgument] [length]: 3, [name]: 'applyAsTemplateArgument' } },
          [name]: 'RequireResolveHeaderDependencyTemplate' } } => RequireResolveHeaderDependencyTemplate {},
     { [Function: RequireHeaderDependency]
       [length]: 1,
       [prototype]: RequireHeaderDependency { [constructor]: [Circular] },
       [name]: 'RequireHeaderDependency',
       Template:
        { [Function: RequireHeaderDependencyTemplate]
          [length]: 0,
          [prototype]:
           RequireHeaderDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 2, [name]: 'apply' },
             [applyAsTemplateArgument]:
              { [Function: applyAsTemplateArgument] [length]: 3, [name]: 'applyAsTemplateArgument' } },
          [name]: 'RequireHeaderDependencyTemplate' } } => RequireHeaderDependencyTemplate {},
     { [Function: RequireIncludeDependency]
       [length]: 2,
       [prototype]:
        RequireIncludeDependency {
          [constructor]: [Circular],
          [getReference]:
           { [Function: getReference] [length]: 0, [name]: 'getReference' },
          [type]: [Getter] },
       [name]: 'RequireIncludeDependency',
       Template:
        { [Function: RequireIncludeDependencyTemplate]
          [length]: 0,
          [prototype]:
           RequireIncludeDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'RequireIncludeDependencyTemplate' } } => RequireIncludeDependencyTemplate {},
     { [Function: RequireEnsureItemDependency]
       [length]: 1,
       [prototype]:
        RequireEnsureItemDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'RequireEnsureItemDependency',
       Template:
        { [Function: NullDependencyTemplate]
          [length]: 0,
          [prototype]:
           NullDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 0, [name]: 'apply' } },
          [name]: 'NullDependencyTemplate' } } => NullDependencyTemplate {},
     { [Function: RequireEnsureDependency]
       [length]: 1,
       [prototype]:
        RequireEnsureDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'RequireEnsureDependency',
       Template:
        { [Function: RequireEnsureDependencyTemplate]
          [length]: 0,
          [prototype]:
           RequireEnsureDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'RequireEnsureDependencyTemplate' } } => RequireEnsureDependencyTemplate {},
     { [Function: RequireContextDependency]
       [length]: 2,
       [prototype]:
        RequireContextDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'RequireContextDependency',
       Template:
        { [Function: ModuleDependencyTemplateAsRequireId]
          [length]: 0,
          [prototype]:
           ModuleDependencyTemplateAsRequireId {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ModuleDependencyTemplateAsRequireId' } } => ModuleDependencyTemplateAsRequireId {},
     { [Function: ImportDependency]
       [length]: 3,
       [prototype]:
        ImportDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'ImportDependency',
       Template:
        { [Function: ImportDependencyTemplate]
          [length]: 0,
          [prototype]:
           ImportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ImportDependencyTemplate' } } => ImportDependencyTemplate {},
     { [Function: ImportEagerDependency]
       [length]: 3,
       [prototype]:
        ImportEagerDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'ImportEagerDependency',
       Template:
        { [Function: ImportEagerDependencyTemplate]
          [length]: 0,
          [prototype]:
           ImportEagerDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ImportEagerDependencyTemplate' } } => ImportEagerDependencyTemplate {},
     { [Function: ImportWeakDependency]
       [length]: 3,
       [prototype]:
        ImportWeakDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'ImportWeakDependency',
       Template:
        { [Function: ImportDependencyTemplate]
          [length]: 0,
          [prototype]:
           ImportDependencyTemplate {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ImportDependencyTemplate' } } => ImportDependencyTemplate {},
     { [Function: ImportContextDependency]
       [length]: 3,
       [prototype]:
        ImportContextDependency { [constructor]: [Circular], [type]: [Getter] },
       [name]: 'ImportContextDependency',
       Template:
        { [Function: ContextDependencyTemplateAsRequireCall]
          [length]: 0,
          [prototype]:
           ContextDependencyTemplateAsRequireCall {
             [constructor]: [Circular],
             [apply]: { [Function: apply] [length]: 3, [name]: 'apply' } },
          [name]: 'ContextDependencyTemplateAsRequireCall' } } => ContextDependencyTemplateAsRequireCall {},
     [size]: 33 },
  childrenCounters: {},
  usedChunkIds: null,
  usedModuleIds: null,
  fileTimestamps: Map {},
  contextTimestamps: Map {},
  compilationDependencies: Set {},
  _buildingModules: Map {},
  _rebuildingModules: Map {},
  emittedAssets: Set {} }